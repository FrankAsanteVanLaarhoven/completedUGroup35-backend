/// <reference types="node" />
import type { ConnectOptions } from 'mongoose';
import { CorsOptions } from 'cors';
import type { GraphQLSchema } from 'graphql';
import { IncomingMessage } from 'http';
import type { ListHooks } from './hooks';
import type { ListAccessControl, FieldAccessControl } from './access-control';
import type { ListSchemaConfig, ListConfig, BaseFields, FieldType, FieldConfig, MaybeSessionFunction, MaybeItemFunction, CacheHint } from './lists';
import type { KeystoneContext } from '..';
import { CreateContext } from '../core';
import type { BaseKeystone } from '../base';
import { SessionStrategy } from '../session';
import type { MaybePromise } from '../utils';
export declare type KeystoneConfig = {
    lists: ListSchemaConfig;
    db: DatabaseConfig;
    ui?: AdminUIConfig;
    server?: ServerConfig;
    session?: () => SessionStrategy<any>;
    graphql?: GraphQLConfig;
    extendGraphqlSchema?: ExtendGraphqlSchema;
};
export type { ListSchemaConfig, ListConfig, BaseFields, FieldType, FieldConfig, MaybeSessionFunction, MaybeItemFunction, CacheHint, };
export declare type DatabaseCommon = {
    url: string;
    onConnect?: (args: KeystoneContext) => Promise<void>;
};
export declare type DatabaseConfig = DatabaseCommon & ({
    adapter: 'prisma_postgresql';
    enableLogging?: boolean;
    getPrismaPath?: (arg: {
        prismaSchema: any;
    }) => string;
    getDbSchemaName?: (arg: {
        prismaSchema: any;
    }) => string;
} | {
    adapter: 'knex';
    dropDatabase?: boolean;
    schemaName?: string;
} | {
    adapter: 'mongoose';
    mongooseOptions?: {
        mongoUri?: string;
    } & ConnectOptions;
});
export declare type AdminUIConfig = {
    /** Enables certain functionality in the Admin UI that expects the session to be an item */
    enableSessionItem?: boolean;
    /** A function that can be run to validate that the current session should have access to the Admin UI */
    isAccessAllowed?: (context: KeystoneContext) => MaybePromise<boolean>;
    /** An array of page routes that can be accessed without passing the isAccessAllowed check */
    publicPages?: string[];
    /** The basePath for the Admin UI App */
    path?: string;
    getAdditionalFiles?: ((config: KeystoneConfig) => MaybePromise<AdminFileToWrite[]>)[];
    pageMiddleware?: (args: {
        req: IncomingMessage;
        session: any;
        isValidSession: boolean;
        createContext: CreateContext;
    }) => MaybePromise<{
        kind: 'redirect';
        to: string;
    } | void>;
};
export declare type AdminFileToWrite = {
    mode: 'write';
    src: string;
    outputPath: string;
} | {
    mode: 'copy';
    inputPath: string;
    outputPath: string;
};
export declare type ServerConfig = {
    /** Configuration options for the cors middleware. Set to `true` to use core Keystone defaults */
    cors?: CorsOptions | true;
    /** Port number to start the server on. Defaults to process.env.PORT || 3000 */
    port?: number;
};
export declare type GraphQLConfig = {
    queryLimits?: {
        maxTotalResults?: number;
    };
};
export declare type ExtendGraphqlSchema = (schema: GraphQLSchema, keystone: BaseKeystone) => GraphQLSchema;
export type { ListHooks, ListAccessControl, FieldAccessControl };
