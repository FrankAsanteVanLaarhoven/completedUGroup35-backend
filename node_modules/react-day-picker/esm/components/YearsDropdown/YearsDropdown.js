import * as React from 'react';
import { setYear, startOfYear } from 'date-fns';
import { useDayPicker } from '../../contexts';
/**
 * Render a dropdown to change the year. Take in account the `nav.fromDate` and
 * `toDate` from context.
 */
export function YearsDropdown(props) {
    var displayMonth = props.displayMonth;
    var _a = useDayPicker(), fromDate = _a.fromDate, toDate = _a.toDate, locale = _a.locale, styles = _a.styles, classNames = _a.classNames, Dropdown = _a.components.Dropdown, formatYearCaption = _a.formatters.formatYearCaption, labelYearDropdown = _a.labels.labelYearDropdown;
    var years = [];
    if (fromDate && toDate) {
        var fromYear = fromDate.getFullYear();
        var toYear = toDate.getFullYear();
        for (var year = fromYear; year <= toYear; year++) {
            years.push(setYear(startOfYear(new Date()), year));
        }
    }
    var handleChange = function (e) {
        var newMonth = setYear(new Date(displayMonth), Number(e.target.value));
        props.onChange(newMonth);
    };
    return (React.createElement(Dropdown, { "aria-label": labelYearDropdown(), className: classNames.dropdown_month, style: styles.dropdown_month, onChange: handleChange, value: displayMonth.getFullYear(), caption: formatYearCaption(displayMonth, { locale: locale }) }, years.map(function (year) { return (React.createElement("option", { key: year.getFullYear(), value: year.getFullYear() }, formatYearCaption(year, { locale: locale }))); })));
}
//# sourceMappingURL=YearsDropdown.js.map