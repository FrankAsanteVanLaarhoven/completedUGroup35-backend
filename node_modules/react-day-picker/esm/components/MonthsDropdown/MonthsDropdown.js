import * as React from 'react';
import { isSameYear, setMonth as setDateMonth, startOfMonth } from 'date-fns';
import { useDayPicker } from '../../contexts';
/**
 * Render the dropdown to navigate between months.
 */
export function MonthsDropdown(props) {
    var displayMonth = props.displayMonth;
    var _a = useDayPicker(), fromDate = _a.fromDate, toDate = _a.toDate, styles = _a.styles, locale = _a.locale, formatMonthCaption = _a.formatters.formatMonthCaption, classNames = _a.classNames, Dropdown = _a.components.Dropdown, labelMonthDropdown = _a.labels.labelMonthDropdown;
    if (!fromDate && !toDate) {
        // TODO: use type guards
        return React.createElement(React.Fragment, null);
    }
    var dropdownMonths = [];
    if (fromDate && toDate) {
        if (isSameYear(fromDate, toDate)) {
            // only display the months included in the range
            for (var month = fromDate.getMonth(); month <= toDate.getMonth(); month++) {
                dropdownMonths.push(setDateMonth(startOfMonth(fromDate), month));
            }
        }
        else {
            // display all the 12 months
            for (var month = 0; month <= 11; month++) {
                var anyDate = new Date(); // any date is OK, we just need the year
                dropdownMonths.push(setDateMonth(startOfMonth(anyDate), month));
            }
        }
    }
    var handleChange = function (e) {
        var newMonth = setDateMonth(new Date(displayMonth), Number(e.target.value));
        props.onChange(newMonth);
    };
    return (React.createElement(Dropdown, { "aria-label": labelMonthDropdown(), className: classNames.dropdown_month, style: styles.dropdown_month, onChange: handleChange, value: displayMonth.getMonth(), caption: formatMonthCaption(displayMonth, { locale: locale }) }, dropdownMonths.map(function (m) { return (React.createElement("option", { key: m.getMonth(), value: m.getMonth() }, formatMonthCaption(m, { locale: locale }))); })));
}
//# sourceMappingURL=MonthsDropdown.js.map