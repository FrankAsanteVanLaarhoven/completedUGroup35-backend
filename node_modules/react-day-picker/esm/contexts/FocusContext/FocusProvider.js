import * as React from 'react';
import { addDays, addMonths, addWeeks, isSameMonth } from 'date-fns';
import { useDayPicker, useNavigation } from '..';
import { FocusContext } from './FocusContext';
/** The provider for the [[FocusContext]]. */
export function FocusProvider(_a) {
    var children = _a.children;
    var _b = React.useState(), focusedDay = _b[0], setDay = _b[1];
    var _c = useNavigation(), goToMonth = _c.goToMonth, displayMonths = _c.displayMonths;
    var numberOfMonths = useDayPicker().numberOfMonths;
    var blur = function () { return setDay(undefined); };
    var focus = function (date) { return setDay(date); };
    var switchMonth = function (date, offset) {
        if (displayMonths.some(function (m) { return isSameMonth(date, m); }))
            return;
        if (offset < 0) {
            goToMonth(addMonths(date, 1 + offset));
        }
        else {
            goToMonth(date);
        }
    };
    var focusDayBefore = function () {
        if (!focusedDay)
            return;
        var before = addDays(focusedDay, -1);
        setDay(before);
        switchMonth(before, numberOfMonths * -1);
    };
    var focusDayAfter = function () {
        if (!focusedDay)
            return;
        var after = addDays(focusedDay, 1);
        setDay(after);
        switchMonth(after, numberOfMonths);
    };
    var focusWeekBeforeDay = function () {
        if (!focusedDay)
            return;
        var up = addWeeks(focusedDay, -1);
        setDay(up);
        switchMonth(up, numberOfMonths * -1);
    };
    var focusWeekAfterDay = function () {
        if (!focusedDay)
            return;
        var down = addWeeks(focusedDay, 1);
        setDay(down);
        switchMonth(down, numberOfMonths);
    };
    var setters = {
        blur: blur,
        focus: focus,
        focusDayAfter: focusDayAfter,
        focusDayBefore: focusDayBefore,
        focusWeekAfterDay: focusWeekAfterDay,
        focusWeekBeforeDay: focusWeekBeforeDay
    };
    return (React.createElement(FocusContext.Provider, { value: [focusedDay, setters] }, children));
}
//# sourceMappingURL=FocusProvider.js.map