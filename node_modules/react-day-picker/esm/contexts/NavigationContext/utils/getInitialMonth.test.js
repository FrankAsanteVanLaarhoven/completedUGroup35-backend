import { addMonths, isSameMonth } from 'date-fns';
import { getInitialMonth } from './getInitialMonth';
describe('when no toDate is given', function () {
    describe('when month is in context', function () {
        var month = new Date(2010, 11, 12);
        it('return that month', function () {
            var initialMonth = getInitialMonth({ month: month });
            expect(isSameMonth(initialMonth, month)).toBe(true);
        });
    });
    describe('when defaultMonth is in context', function () {
        var defaultMonth = new Date(2010, 11, 12);
        it('return that month', function () {
            var initialMonth = getInitialMonth({ defaultMonth: defaultMonth });
            expect(isSameMonth(initialMonth, defaultMonth)).toBe(true);
        });
    });
    describe('when no month or defaultMonth are in context', function () {
        var today = new Date(2010, 11, 12);
        it('return the today month', function () {
            var initialMonth = getInitialMonth({ today: today });
            expect(isSameMonth(initialMonth, today)).toBe(true);
        });
    });
});
describe('when toDate is given', function () {
    describe('when toDate is before the default initial date', function () {
        var month = new Date(2010, 11, 12);
        var toDate = addMonths(month, -2);
        describe('when the number of month is 1', function () {
            var numberOfMonths = 1;
            it('return the toDate', function () {
                var initialMonth = getInitialMonth({
                    month: month,
                    toDate: toDate,
                    numberOfMonths: numberOfMonths
                });
                expect(isSameMonth(initialMonth, toDate)).toBe(true);
            });
        });
        describe('when the number of month is 3', function () {
            var numberOfMonths = 3;
            it('return the toDate plus the number of months', function () {
                var initialMonth = getInitialMonth({
                    month: month,
                    toDate: toDate,
                    numberOfMonths: numberOfMonths
                });
                var expectedMonth = addMonths(toDate, -1 * (numberOfMonths - 1));
                expect(isSameMonth(initialMonth, expectedMonth)).toBe(true);
            });
        });
    });
});
//# sourceMappingURL=getInitialMonth.test.js.map