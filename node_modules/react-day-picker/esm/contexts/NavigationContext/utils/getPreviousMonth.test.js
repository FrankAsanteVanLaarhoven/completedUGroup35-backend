import { addMonths, isSameMonth } from 'date-fns';
import { getPreviousMonth } from './getPreviousMonth';
var startingMonth = new Date(2020, 4, 31);
describe('when number of months is 1', function () {
    describe('when the navigation is disabled', function () {
        var disableNavigation = true;
        it('the previous month is undefined', function () {
            var result = getPreviousMonth(startingMonth, { disableNavigation: disableNavigation });
            expect(result).toBe(undefined);
        });
    });
    describe('when in the navigable range', function () {
        var fromDate = addMonths(startingMonth, -3);
        it('the previous month is not undefined', function () {
            var result = getPreviousMonth(startingMonth, { fromDate: fromDate });
            var expectedPrevMonth = addMonths(startingMonth, -1);
            expect(result && isSameMonth(result, expectedPrevMonth)).toBeTruthy();
        });
    });
    describe('when not in the navigable range', function () {
        var fromDate = startingMonth;
        it('the previous month is undefined', function () {
            var result = getPreviousMonth(startingMonth, { fromDate: fromDate });
            expect(result).toBe(undefined);
        });
    });
});
describe('when displaying 3 months', function () {
    var numberOfMonths = 3;
    describe('when the navigation is paged', function () {
        var pagedNavigation = true;
        it('the previous month is 3 months back', function () {
            var result = getPreviousMonth(startingMonth, {
                numberOfMonths: numberOfMonths,
                pagedNavigation: pagedNavigation
            });
            var expectedPrevMonth = addMonths(startingMonth, -numberOfMonths);
            expect(result && isSameMonth(result, expectedPrevMonth)).toBeTruthy();
        });
    });
    describe('when the navigation is not paged', function () {
        var pagedNavigation = false;
        it('the previous month is 1 months back', function () {
            var result = getPreviousMonth(startingMonth, {
                numberOfMonths: numberOfMonths,
                pagedNavigation: pagedNavigation
            });
            var expectedPrevMonth = addMonths(startingMonth, -1);
            expect(result && isSameMonth(result, expectedPrevMonth)).toBeTruthy();
        });
    });
});
//# sourceMappingURL=getPreviousMonth.test.js.map