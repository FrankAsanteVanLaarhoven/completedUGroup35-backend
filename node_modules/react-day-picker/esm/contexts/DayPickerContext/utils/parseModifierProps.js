/** Props that will merge into the modifiers. */
var modifierShortcuts = [
    'selected',
    'hidden',
    'disabled'
];
/**
 * Parse the modifiers from the props and return them as a map of array of
 * matcher.
 *
 * Internally we want modifiers as an array of matchers â€“ as opposite of the
 * props which can accept also a matcher.
 */
export function parseModifierProps(initialProps) {
    var initialModifiers = initialProps.modifiers || {};
    var modifiers = {
        selected: [],
        disabled: [],
        hidden: [],
        range_end: [],
        range_middle: [],
        range_start: []
    };
    Object.entries(initialModifiers).forEach(function (_a) {
        var modifier = _a[0], matcher = _a[1];
        if (Array.isArray(matcher)) {
            modifiers[modifier] = matcher;
        }
        else if (matcher) {
            modifiers[modifier] = [matcher];
        }
        else {
            modifiers[modifier] = [];
        }
    });
    modifierShortcuts.forEach(function (modifier) {
        if (Array.isArray(initialProps[modifier])) {
            modifiers[modifier] = initialProps[modifier];
        }
        else if (initialProps[modifier]) {
            modifiers[modifier] = [initialProps[modifier]];
        }
        else {
            modifiers[modifier] = [];
        }
    });
    return modifiers;
}
//# sourceMappingURL=parseModifierProps.js.map