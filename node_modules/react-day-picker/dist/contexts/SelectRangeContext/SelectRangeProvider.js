"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectRangeProvider = void 0;
var React = __importStar(require("react"));
var date_fns_1 = require("date-fns");
var types_1 = require("../../types");
var SelectRangeContext_1 = require("./SelectRangeContext");
var addToRange_1 = require("./utils/addToRange");
/** Provides the values for the [[SelectRangeProvider]]. */
function SelectRangeProvider(_a) {
    var initialProps = _a.initialProps, children = _a.children;
    var initialSelected;
    var isRangeMode = false;
    var min, max;
    if (types_1.isDayPickerRange(initialProps)) {
        isRangeMode = true;
        initialSelected = initialProps.defaultSelected;
        min = initialProps.min;
        max = initialProps.max;
    }
    var _b = React.useState(initialSelected), selected = _b[0], setSelected = _b[1];
    var handleDayClick = function (day, modifiers, e) {
        var _a, _b;
        (_a = initialProps.onDayClick) === null || _a === void 0 ? void 0 : _a.call(initialProps, day, modifiers, e);
        if (!types_1.isDayPickerRange(initialProps)) {
            return;
        }
        var newValue = addToRange_1.addToRange(day, selected);
        if ((min || max) &&
            selected && (newValue === null || newValue === void 0 ? void 0 : newValue.to) &&
            newValue.from &&
            newValue.from !== newValue.to) {
            var diff = Math.abs(date_fns_1.differenceInCalendarDays(newValue === null || newValue === void 0 ? void 0 : newValue.to, newValue === null || newValue === void 0 ? void 0 : newValue.from));
            if (min && diff < min) {
                return;
            }
            if (max && diff >= max) {
                return;
            }
        }
        setSelected(newValue);
        (_b = initialProps.onSelect) === null || _b === void 0 ? void 0 : _b.call(initialProps, newValue, day, modifiers, e);
    };
    var modifiers = {
        selected: [],
        range_start: [],
        range_end: [],
        range_middle: [],
        disabled: []
    };
    if (selected) {
        modifiers.selected = [selected];
        if (selected.from) {
            modifiers.range_start = [selected.from];
            if (selected.to) {
                modifiers.range_middle = [
                    {
                        after: selected.from,
                        before: selected.to
                    }
                ];
                if (max || min) {
                    modifiers.disabled = [
                        function (date) {
                            if (max &&
                                selected.to &&
                                selected.from &&
                                date_fns_1.isBefore(date, selected.from)) {
                                var diff = date_fns_1.differenceInCalendarDays(selected.to, date);
                                if (diff >= max) {
                                    return true;
                                }
                            }
                            if (max &&
                                selected.to &&
                                selected.from &&
                                date_fns_1.isAfter(date, selected.to)) {
                                var diff = date_fns_1.differenceInCalendarDays(date, selected.from);
                                if (diff >= max) {
                                    return true;
                                }
                            }
                            if (min && selected.from && date_fns_1.isBefore(date, selected.from)) {
                                var diff = date_fns_1.differenceInCalendarDays(selected.from, date);
                                if (diff < min) {
                                    return true;
                                }
                            }
                            if (min &&
                                selected.to &&
                                selected.from &&
                                date_fns_1.isAfter(date, selected.to)) {
                                var diff = date_fns_1.differenceInCalendarDays(date, selected.from);
                                if (diff < min) {
                                    return true;
                                }
                            }
                            return false;
                        }
                    ];
                }
                modifiers.range_end = [selected.to];
            }
            else {
                modifiers.range_end = [selected.from];
            }
        }
    }
    return (React.createElement(SelectRangeContext_1.SelectRangeContext.Provider, { value: { selected: selected, handleDayClick: handleDayClick, modifiers: modifiers, isRangeMode: isRangeMode } }, children));
}
exports.SelectRangeProvider = SelectRangeProvider;
//# sourceMappingURL=SelectRangeProvider.js.map