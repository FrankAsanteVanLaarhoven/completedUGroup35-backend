"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectMultipleProvider = void 0;
var React = __importStar(require("react"));
var date_fns_1 = require("date-fns");
var types_1 = require("../../types");
var SelectMultipleContext_1 = require("./SelectMultipleContext");
/** Provides the values for the [[SelectMultipleContext]]. */
function SelectMultipleProvider(_a) {
    var initialProps = _a.initialProps, children = _a.children;
    var initialSelected;
    var isMultipleMode = false;
    if (types_1.isDayPickerMultiple(initialProps)) {
        initialSelected = initialProps.defaultSelected;
        isMultipleMode = true;
    }
    var _b = React.useState(initialSelected || undefined), selectedDays = _b[0], setSelectedDays = _b[1];
    var handleDayClick = function (day, modifiers, e) {
        var _a, _b;
        if (!types_1.isDayPickerMultiple(initialProps)) {
            return;
        }
        (_a = initialProps.onDayClick) === null || _a === void 0 ? void 0 : _a.call(initialProps, day, modifiers, e);
        var isMinSelected = Boolean(initialProps.min &&
            modifiers.selected &&
            selectedDays &&
            selectedDays.length === initialProps.min);
        if (isMinSelected) {
            return;
        }
        var isMaxSelected = Boolean(initialProps.max &&
            !modifiers.selected &&
            selectedDays &&
            selectedDays.length === initialProps.max);
        if (isMaxSelected) {
            return;
        }
        var days = selectedDays ? __spreadArrays(selectedDays) : [];
        if (modifiers.selected) {
            var index = days.findIndex(function (selectedDay) {
                return date_fns_1.isSameDay(day, selectedDay);
            });
            days.splice(index, 1);
        }
        else {
            days.push(day);
        }
        setSelectedDays(days);
        (_b = initialProps.onSelect) === null || _b === void 0 ? void 0 : _b.call(initialProps, days, day, modifiers, e);
    };
    var modifiers = {
        selected: [],
        disabled: []
    };
    if (selectedDays && types_1.isDayPickerMultiple(initialProps)) {
        modifiers.selected = selectedDays;
        modifiers.disabled = [
            function disableDay(day) {
                var isMaxSelected = initialProps.max && selectedDays.length > initialProps.max - 1;
                var isSelected = selectedDays.some(function (selectedDay) {
                    return date_fns_1.isSameDay(selectedDay, day);
                });
                return Boolean(isMaxSelected && !isSelected);
            }
        ];
    }
    return (React.createElement(SelectMultipleContext_1.SelectMultipleContext.Provider, { value: {
            selected: selectedDays,
            handleDayClick: handleDayClick,
            modifiers: modifiers,
            isMultipleMode: isMultipleMode
        } }, children));
}
exports.SelectMultipleProvider = SelectMultipleProvider;
//# sourceMappingURL=SelectMultipleProvider.js.map