"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var date_fns_1 = require("date-fns");
var getNextMonth_1 = require("./getNextMonth");
var startingMonth = new Date(2020, 4, 31);
describe('when number of months is 1', function () {
    describe('when the navigation is disabled', function () {
        var disableNavigation = true;
        it('the next month is undefined', function () {
            var result = getNextMonth_1.getNextMonth(startingMonth, { disableNavigation: disableNavigation });
            expect(result).toBe(undefined);
        });
    });
    describe('when in the navigable range', function () {
        var toDate = date_fns_1.addMonths(startingMonth, 3);
        it('the next month is not undefined', function () {
            var result = getNextMonth_1.getNextMonth(startingMonth, { toDate: toDate });
            var expectedNextMonth = date_fns_1.addMonths(startingMonth, 1);
            expect(result && date_fns_1.isSameMonth(result, expectedNextMonth)).toBeTruthy();
        });
    });
    describe('when not in the navigable range', function () {
        var toDate = startingMonth;
        it('the next month is undefined', function () {
            var result = getNextMonth_1.getNextMonth(startingMonth, { toDate: toDate });
            expect(result).toBe(undefined);
        });
    });
});
describe('when displaying 3 months', function () {
    var numberOfMonths = 3;
    describe('when the navigation is paged', function () {
        var pagedNavigation = true;
        it('the next month is 3 months ahead', function () {
            var result = getNextMonth_1.getNextMonth(startingMonth, {
                numberOfMonths: numberOfMonths,
                pagedNavigation: pagedNavigation
            });
            var expectedNextMonth = date_fns_1.addMonths(startingMonth, 3);
            expect(result && date_fns_1.isSameMonth(result, expectedNextMonth)).toBeTruthy();
        });
        describe('when the to-date is ahead less than 3 months', function () {
            it('the next month is undefined', function () {
                var result = getNextMonth_1.getNextMonth(startingMonth, {
                    numberOfMonths: numberOfMonths,
                    pagedNavigation: pagedNavigation,
                    toDate: date_fns_1.addMonths(startingMonth, 1)
                });
                expect(result).toBe(undefined);
            });
        });
    });
    describe('when the navigation is not paged', function () {
        var pagedNavigation = false;
        it('the next month is 1 months ahead', function () {
            var result = getNextMonth_1.getNextMonth(startingMonth, {
                numberOfMonths: numberOfMonths,
                pagedNavigation: pagedNavigation
            });
            var expectedNextMonth = date_fns_1.addMonths(startingMonth, 1);
            expect(result && date_fns_1.isSameMonth(result, expectedNextMonth)).toBeTruthy();
        });
        describe('when the to-date is ahead less than 3 months', function () {
            it('the next month is undefined', function () {
                var result = getNextMonth_1.getNextMonth(startingMonth, {
                    numberOfMonths: numberOfMonths,
                    pagedNavigation: pagedNavigation,
                    toDate: date_fns_1.addMonths(startingMonth, 2)
                });
                expect(result).toBe(undefined);
            });
        });
    });
});
//# sourceMappingURL=getNextMonth.test.js.map