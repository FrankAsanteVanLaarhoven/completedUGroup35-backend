"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FocusProvider = void 0;
var React = __importStar(require("react"));
var date_fns_1 = require("date-fns");
var contexts_1 = require("..");
var FocusContext_1 = require("./FocusContext");
/** The provider for the [[FocusContext]]. */
function FocusProvider(_a) {
    var children = _a.children;
    var _b = React.useState(), focusedDay = _b[0], setDay = _b[1];
    var _c = contexts_1.useNavigation(), goToMonth = _c.goToMonth, displayMonths = _c.displayMonths;
    var numberOfMonths = contexts_1.useDayPicker().numberOfMonths;
    var blur = function () { return setDay(undefined); };
    var focus = function (date) { return setDay(date); };
    var switchMonth = function (date, offset) {
        if (displayMonths.some(function (m) { return date_fns_1.isSameMonth(date, m); }))
            return;
        if (offset < 0) {
            goToMonth(date_fns_1.addMonths(date, 1 + offset));
        }
        else {
            goToMonth(date);
        }
    };
    var focusDayBefore = function () {
        if (!focusedDay)
            return;
        var before = date_fns_1.addDays(focusedDay, -1);
        setDay(before);
        switchMonth(before, numberOfMonths * -1);
    };
    var focusDayAfter = function () {
        if (!focusedDay)
            return;
        var after = date_fns_1.addDays(focusedDay, 1);
        setDay(after);
        switchMonth(after, numberOfMonths);
    };
    var focusWeekBeforeDay = function () {
        if (!focusedDay)
            return;
        var up = date_fns_1.addWeeks(focusedDay, -1);
        setDay(up);
        switchMonth(up, numberOfMonths * -1);
    };
    var focusWeekAfterDay = function () {
        if (!focusedDay)
            return;
        var down = date_fns_1.addWeeks(focusedDay, 1);
        setDay(down);
        switchMonth(down, numberOfMonths);
    };
    var setters = {
        blur: blur,
        focus: focus,
        focusDayAfter: focusDayAfter,
        focusDayBefore: focusDayBefore,
        focusWeekAfterDay: focusWeekAfterDay,
        focusWeekBeforeDay: focusWeekBeforeDay
    };
    return (React.createElement(FocusContext_1.FocusContext.Provider, { value: [focusedDay, setters] }, children));
}
exports.FocusProvider = FocusProvider;
//# sourceMappingURL=FocusProvider.js.map