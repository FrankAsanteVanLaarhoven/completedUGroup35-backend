"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useModifiers = void 0;
var contexts_1 = require("../../contexts");
var types_1 = require("../../types");
var getModifierStatus_1 = require("./utils/getModifierStatus");
/** Return the modifiers and its styles for the specified date. */
function useModifiers(date) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
    var context = contexts_1.useDayPicker();
    var singleSelect = contexts_1.useSelectSingle();
    var multipleSelect = contexts_1.useSelectMultiple();
    var rangeSelect = contexts_1.useSelectRange();
    // TODO: modifiers from context should not be overridden
    var modifiers = __assign(__assign({}, context.modifiers), { today: (_a = context.modifiers.today) !== null && _a !== void 0 ? _a : [context.today], disabled: context.modifiers.disabled });
    if (types_1.isDayPickerSingle(context)) {
        modifiers.selected = ((_b = modifiers.selected) !== null && _b !== void 0 ? _b : []).concat((_c = singleSelect.modifiers.selected) !== null && _c !== void 0 ? _c : []);
    }
    else if (types_1.isDayPickerMultiple(context)) {
        modifiers.selected = ((_d = modifiers.selected) !== null && _d !== void 0 ? _d : []).concat((_e = multipleSelect.modifiers.selected) !== null && _e !== void 0 ? _e : []);
        modifiers.disabled = ((_f = modifiers.disabled) !== null && _f !== void 0 ? _f : []).concat((_g = multipleSelect.modifiers.disabled) !== null && _g !== void 0 ? _g : []);
    }
    else if (types_1.isDayPickerRange(context)) {
        modifiers.selected = ((_h = modifiers.selected) !== null && _h !== void 0 ? _h : []).concat((_j = multipleSelect.modifiers.selected) !== null && _j !== void 0 ? _j : []);
        modifiers.disabled = ((_k = modifiers.disabled) !== null && _k !== void 0 ? _k : []).concat((_l = multipleSelect.modifiers.disabled) !== null && _l !== void 0 ? _l : []);
        modifiers.selected = (_m = rangeSelect.modifiers.selected) !== null && _m !== void 0 ? _m : [];
        modifiers.range_start = (_o = rangeSelect.modifiers.range_start) !== null && _o !== void 0 ? _o : [];
        modifiers.range_middle = (_p = rangeSelect.modifiers.range_middle) !== null && _p !== void 0 ? _p : [];
        modifiers.range_end = (_q = rangeSelect.modifiers.range_end) !== null && _q !== void 0 ? _q : [];
        modifiers.disabled = modifiers.disabled.concat((_r = rangeSelect.modifiers.disabled) !== null && _r !== void 0 ? _r : []);
    }
    var status = getModifierStatus_1.getModifierStatus(date, modifiers);
    var modifierClassNames = [];
    Object.keys(status)
        .filter(function (modifier) { return Boolean(status[modifier]); })
        .forEach(function (modifier) {
        var customClassName = context.modifierClassNames[modifier];
        if (customClassName) {
            modifierClassNames.push(customClassName);
        }
        else {
            modifierClassNames.push("" + context.modifierPrefix + modifier);
        }
    });
    var modifierStyle = {};
    if (context.modifierStyles) {
        Object.keys(status).forEach(function (modifier) {
            var _a;
            modifierStyle = __assign(__assign({}, modifierStyle), (_a = context.modifierStyles) === null || _a === void 0 ? void 0 : _a[modifier]);
        });
    }
    return {
        modifiers: status,
        modifierClassNames: modifierClassNames,
        modifierStyle: modifierStyle
    };
}
exports.useModifiers = useModifiers;
//# sourceMappingURL=useModifiers.js.map