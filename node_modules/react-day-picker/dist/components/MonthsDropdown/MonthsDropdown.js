"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MonthsDropdown = void 0;
var React = __importStar(require("react"));
var date_fns_1 = require("date-fns");
var contexts_1 = require("../../contexts");
/**
 * Render the dropdown to navigate between months.
 */
function MonthsDropdown(props) {
    var displayMonth = props.displayMonth;
    var _a = contexts_1.useDayPicker(), fromDate = _a.fromDate, toDate = _a.toDate, styles = _a.styles, locale = _a.locale, formatMonthCaption = _a.formatters.formatMonthCaption, classNames = _a.classNames, Dropdown = _a.components.Dropdown, labelMonthDropdown = _a.labels.labelMonthDropdown;
    if (!fromDate && !toDate) {
        // TODO: use type guards
        return React.createElement(React.Fragment, null);
    }
    var dropdownMonths = [];
    if (fromDate && toDate) {
        if (date_fns_1.isSameYear(fromDate, toDate)) {
            // only display the months included in the range
            for (var month = fromDate.getMonth(); month <= toDate.getMonth(); month++) {
                dropdownMonths.push(date_fns_1.setMonth(date_fns_1.startOfMonth(fromDate), month));
            }
        }
        else {
            // display all the 12 months
            for (var month = 0; month <= 11; month++) {
                var anyDate = new Date(); // any date is OK, we just need the year
                dropdownMonths.push(date_fns_1.setMonth(date_fns_1.startOfMonth(anyDate), month));
            }
        }
    }
    var handleChange = function (e) {
        var newMonth = date_fns_1.setMonth(new Date(displayMonth), Number(e.target.value));
        props.onChange(newMonth);
    };
    return (React.createElement(Dropdown, { "aria-label": labelMonthDropdown(), className: classNames.dropdown_month, style: styles.dropdown_month, onChange: handleChange, value: displayMonth.getMonth(), caption: formatMonthCaption(displayMonth, { locale: locale }) }, dropdownMonths.map(function (m) { return (React.createElement("option", { key: m.getMonth(), value: m.getMonth() }, formatMonthCaption(m, { locale: locale }))); })));
}
exports.MonthsDropdown = MonthsDropdown;
//# sourceMappingURL=MonthsDropdown.js.map