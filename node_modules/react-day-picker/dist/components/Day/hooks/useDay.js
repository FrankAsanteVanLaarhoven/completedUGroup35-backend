"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useDay = void 0;
var react_1 = __importDefault(require("react"));
var date_fns_1 = require("date-fns");
var contexts_1 = require("../../../contexts");
var hooks_1 = require("../../../hooks");
var types_1 = require("../../../types");
var useDayFocus_1 = require("./useDayFocus");
/**
 * This hook returns details about the content to render in the day cell.
 *
 *
 * When a day cell is rendered in the table, DayPicker can either:
 *
 * - render nothing: when the day is outside the month or has matched the
 *   "hidden" modifier.
 * - render a button. When a selection mode is set, DayPicker renders a button
 *   to allow the focus and the selection. In case of `uncontrolled` selection
 *   mode, DayPicker expects a `onDayClick` prop to render a button.
 * - render a non-interactive element: when no selection mode is set, the day
 *   cell shouldnâ€™t respond to any interaction. DayPicker should render a `div`
 *   or a `span`.
 *
 * ### Usage
 *
 * Use this hook to customize the behavior of the [[Day]] component. Create a
 * new `Day` component using this hook and pass it to the `components` prop.
 * The source of [[Day]] can be a good starting point.
 *
 * */
function useDay(
/** The day rendered in the month. */
date, 
/** The month where the date is displayed. DayPicker renders days outside the display month when `showOutsideDays` is true. */
displayMonth, 
/** A ref to the button element. */
buttonRef) {
    var context = contexts_1.useDayPicker();
    var single = contexts_1.useSelectSingle();
    var multiple = contexts_1.useSelectMultiple();
    var range = contexts_1.useSelectRange();
    var _a = useDayFocus_1.useDayFocus(date, buttonRef), focus = _a.focus, blur = _a.blur, focusOnKeyDown = _a.focusOnKeyDown, isFocused = _a.isFocused;
    var _b = hooks_1.useModifiers(date), modifiers = _b.modifiers, modifierClassNames = _b.modifierClassNames, modifierStyle = _b.modifierStyle;
    var isOutside = !date_fns_1.isSameMonth(date, displayMonth);
    var returnValue = {
        isOutside: true,
        modifiers: modifiers,
        selected: types_1.isDayPickerSingle(context)
            ? single.selected
            : types_1.isDayPickerMultiple(context)
                ? multiple.selected
                : types_1.isDayPickerRange(context)
                    ? range.selected
                    : undefined
    };
    if (isOutside && !context.showOutsideDays) {
        return returnValue;
    }
    if (modifiers.hidden) {
        return returnValue;
    }
    var classNames = [context.classNames.day].concat(modifierClassNames);
    var style = __assign(__assign({}, context.styles.day), modifierStyle);
    if (isOutside) {
        classNames.push(context.classNames.day_outside);
        style = __assign(__assign({}, context.styles), context.styles.day_outside);
    }
    var DayContent = context.components.DayContent;
    var children = (react_1.default.createElement(DayContent, { date: date, displayMonth: displayMonth, modifiers: modifiers }));
    var className = classNames.join(' ');
    var isControlled = types_1.isDayPickerSingle(context) ||
        types_1.isDayPickerMultiple(context) ||
        types_1.isDayPickerRange(context);
    if (!isControlled && !context.onDayClick) {
        return __assign(__assign({}, returnValue), { nonInteractiveProps: {
                style: style,
                className: className,
                children: children
            } });
    }
    // #region Event handlers
    var handleClick = function (e) {
        var _a, _b, _c, _d;
        if (types_1.isDayPickerSingle(context)) {
            (_a = single.handleDayClick) === null || _a === void 0 ? void 0 : _a.call(single, date, modifiers, e);
        }
        else if (types_1.isDayPickerMultiple(context)) {
            (_b = multiple.handleDayClick) === null || _b === void 0 ? void 0 : _b.call(multiple, date, modifiers, e);
        }
        else if (types_1.isDayPickerRange(context)) {
            (_c = range.handleDayClick) === null || _c === void 0 ? void 0 : _c.call(range, date, modifiers, e);
        }
        (_d = context.onDayClick) === null || _d === void 0 ? void 0 : _d.call(context, date, modifiers, e);
    };
    var handleFocus = function (e) {
        var _a;
        focus(date);
        (_a = context.onDayFocus) === null || _a === void 0 ? void 0 : _a.call(context, date, modifiers, e);
    };
    var handleBlur = function (e) {
        var _a;
        blur();
        (_a = context.onDayBlur) === null || _a === void 0 ? void 0 : _a.call(context, date, modifiers, e);
    };
    var handleKeyDown = function (e) {
        var _a;
        focusOnKeyDown(e);
        (_a = context.onDayKeyDown) === null || _a === void 0 ? void 0 : _a.call(context, date, modifiers, e);
    };
    var handleKeyUp = function (e) {
        var _a;
        (_a = context.onDayKeyUp) === null || _a === void 0 ? void 0 : _a.call(context, date, modifiers, e);
    };
    var handleMouseEnter = function (e) {
        var _a;
        (_a = context.onDayMouseEnter) === null || _a === void 0 ? void 0 : _a.call(context, date, modifiers, e);
    };
    var handleMouseLeave = function (e) {
        var _a;
        (_a = context.onDayMouseLeave) === null || _a === void 0 ? void 0 : _a.call(context, date, modifiers, e);
    };
    var handleTouchCancel = function (e) {
        var _a;
        (_a = context.onDayTouchCancel) === null || _a === void 0 ? void 0 : _a.call(context, date, modifiers, e);
    };
    var handleTouchEnd = function (e) {
        var _a;
        (_a = context.onDayTouchEnd) === null || _a === void 0 ? void 0 : _a.call(context, date, modifiers, e);
    };
    var handleTouchMove = function (e) {
        var _a;
        (_a = context.onDayTouchMove) === null || _a === void 0 ? void 0 : _a.call(context, date, modifiers, e);
    };
    var handleTouchStart = function (e) {
        var _a;
        (_a = context.onDayTouchStart) === null || _a === void 0 ? void 0 : _a.call(context, date, modifiers, e);
    };
    if (isOutside) {
        classNames.push(context.classNames.day_outside);
        style = __assign(__assign({}, context.styles), context.styles.day_outside);
    }
    className = classNames.join(' ');
    var selected = modifiers.selected, disabled = modifiers.disabled;
    var tabIndex = disabled || isFocused ? -1 : 0;
    return __assign(__assign({}, returnValue), { buttonProps: {
            children: children,
            'aria-pressed': selected,
            style: style,
            disabled: disabled,
            className: className,
            tabIndex: tabIndex,
            onClick: handleClick,
            onFocus: handleFocus,
            onBlur: handleBlur,
            onKeyDown: handleKeyDown,
            onKeyUp: handleKeyUp,
            onMouseEnter: handleMouseEnter,
            onMouseLeave: handleMouseLeave,
            onTouchCancel: handleTouchCancel,
            onTouchEnd: handleTouchEnd,
            onTouchMove: handleTouchMove,
            onTouchStart: handleTouchStart
        } });
}
exports.useDay = useDay;
//# sourceMappingURL=useDay.js.map