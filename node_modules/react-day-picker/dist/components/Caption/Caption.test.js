"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
var date_fns_1 = require("date-fns");
var timekeeper_1 = __importDefault(require("timekeeper"));
var test_1 = require("../../test");
var Caption_1 = require("./Caption");
var today = new Date(2021, 8);
var po = new test_1.PageObjects(today);
var fromYear = 2020;
var toYear = 2025;
beforeEach(function () { return timekeeper_1.default.freeze(today); });
afterEach(function () { return timekeeper_1.default.reset(); });
describe('when navigation is disabled', function () {
    beforeEach(function () {
        test_1.customRender(React.createElement(Caption_1.Caption, { displayMonth: today }), {
            disableNavigation: true
        });
    });
    test('should display the caption label', function () {
        expect(po.getCaptionLabel(today)).toBeInTheDocument();
    });
    test('should not render the drop-downs', function () {
        expect(po.monthDropdown).toBeNull();
        expect(po.yearDropdown).toBeNull();
    });
    test('should not render the navigation', function () {
        expect(po.previousButton).toBeNull();
        expect(po.nextButton).toBeNull();
    });
});
describe('when the caption layout is "dropdown"', function () {
    var container;
    beforeEach(function () {
        var context = {
            captionLayout: 'dropdown',
            fromYear: fromYear,
            toYear: toYear,
            classNames: { caption_dropdowns: 'foo_dropdowns' },
            styles: { caption_dropdowns: { color: 'red' } }
        };
        var result = test_1.customRender(React.createElement(Caption_1.Caption, { displayMonth: today }), context);
        container = result.container;
    });
    test('should use the `caption_dropdowns` class name', function () {
        var _a;
        expect((_a = container.firstChild) === null || _a === void 0 ? void 0 : _a.firstChild).toHaveClass('foo_dropdowns');
    });
    test('should use the `caption_dropdowns` style', function () {
        var _a;
        expect((_a = container.firstChild) === null || _a === void 0 ? void 0 : _a.firstChild).toHaveStyle({ color: 'red' });
    });
    test('should render the month drop-down', function () {
        expect(po.monthDropdown).toBeInTheDocument();
    });
    test('should render the year drop-down', function () {
        expect(po.yearDropdown).toBeInTheDocument();
    });
});
describe('when a month is selected', function () {
    var context;
    beforeEach(function () {
        context = {
            captionLayout: 'dropdown',
            fromYear: fromYear,
            toYear: toYear,
            onMonthChange: jest.fn()
        };
        test_1.customRender(React.createElement(Caption_1.Caption, { displayMonth: today }), context);
    });
    describe('from the months drop-down', function () {
        var newMonth = date_fns_1.setMonth(today, 0);
        beforeEach(function () { return po.runSelectMonth(newMonth); });
        test('should call the `onMonthChange` callback', function () {
            expect(context.onMonthChange).toHaveBeenCalledWith(newMonth);
        });
    });
    describe('from the years drop-down', function () {
        var newMonth = date_fns_1.setYear(today, 2022);
        beforeEach(function () { return po.runSelectYear(newMonth); });
        test('should call the `onMonthChange` callback', function () {
            expect(context.onMonthChange).toHaveBeenCalledWith(newMonth);
        });
    });
});
describe('when the caption layout is "dropdown" but no date limits are set', function () {
    beforeEach(function () {
        var context = {
            captionLayout: 'dropdown'
        };
        test_1.customRender(React.createElement(Caption_1.Caption, { displayMonth: today }), context);
    });
    test('should not render the drop-downs', function () {
        expect(po.monthDropdown).toBeNull();
        expect(po.yearDropdown).toBeNull();
    });
});
describe('when the caption layout is "buttons"', function () {
    var context = {
        captionLayout: 'buttons'
    };
    test('should render the caption label', function () {
        test_1.customRender(React.createElement(Caption_1.Caption, { displayMonth: today }), context);
        expect(po.getCaptionLabel(today)).toBeInTheDocument();
    });
    test('should render the next month button', function () {
        test_1.customRender(React.createElement(Caption_1.Caption, { displayMonth: today }), context);
        expect(po.nextButton).toBeInTheDocument();
    });
    test('should render the previous month button', function () {
        test_1.customRender(React.createElement(Caption_1.Caption, { displayMonth: today }), context);
        expect(po.previousButton).toBeInTheDocument();
    });
    describe('when displaying the first of multiple months', function () {
        var numberOfMonths = 3;
        beforeEach(function () {
            test_1.customRender(React.createElement(Caption_1.Caption, { displayMonth: today }), __assign(__assign({}, context), { numberOfMonths: numberOfMonths }));
        });
        test('should hide the next month button', function () {
            expect(po.nextButton).toBeNull();
        });
        test('should show the previous month button', function () {
            expect(po.previousButton).toBeInTheDocument();
        });
    });
    describe('when displaying the last of multiple months', function () {
        var numberOfMonths = 3;
        beforeEach(function () {
            var lastMonth = date_fns_1.addMonths(today, numberOfMonths - 1);
            test_1.customRender(React.createElement(Caption_1.Caption, { displayMonth: lastMonth }), __assign(__assign({}, context), { numberOfMonths: numberOfMonths }));
        });
        test('should hide the previous month button', function () {
            expect(po.previousButton).toBeNull();
        });
        test('should show the next month button', function () {
            expect(po.nextButton).toBeInTheDocument();
        });
    });
    describe('when displaying a month in the middle of multiple months', function () {
        var numberOfMonths = 3;
        beforeEach(function () {
            var lastMonth = date_fns_1.addMonths(today, numberOfMonths - 2);
            test_1.customRender(React.createElement(Caption_1.Caption, { displayMonth: lastMonth }), __assign(__assign({}, context), { numberOfMonths: numberOfMonths }));
        });
        test('should not render the previous month button', function () {
            expect(po.previousButton).toBeNull();
        });
        test('should not render the next month button', function () {
            expect(po.nextButton).toBeNull();
        });
    });
    describe('when clicking the previous button', function () {
        describe('and a previous month is defined', function () {
            var testContext = __assign(__assign({}, context), { onMonthChange: jest.fn() });
            var previousMonth = date_fns_1.addMonths(today, -1);
            beforeEach(function () {
                test_1.customRender(React.createElement(Caption_1.Caption, { displayMonth: today }), testContext);
                po.runPreviousClick();
            });
            test('should call the `onMonthChange` callback', function () {
                expect(testContext.onMonthChange).toHaveBeenCalledWith(previousMonth);
            });
        });
        describe('and the previous month is not defined', function () {
            var testContext = __assign(__assign({}, context), { fromDate: today, onMonthChange: jest.fn() });
            beforeEach(function () {
                test_1.customRender(React.createElement(Caption_1.Caption, { displayMonth: today }), testContext);
                po.runPreviousClick();
            });
            test('should call the `onMonthChange` callback', function () {
                expect(testContext.onMonthChange).not.toHaveBeenCalled();
            });
        });
    });
    describe('when clicking the next month button', function () {
        describe('and the next month is defined', function () {
            var testContext = __assign(__assign({}, context), { onMonthChange: jest.fn() });
            var nextMonth = date_fns_1.addMonths(today, 1);
            beforeEach(function () {
                test_1.customRender(React.createElement(Caption_1.Caption, { displayMonth: today }), testContext);
                po.runNextClick();
            });
            test('should call the `onMonthChange` callback', function () {
                expect(testContext.onMonthChange).toHaveBeenCalledWith(nextMonth);
            });
        });
        describe('and the next month is not defined', function () {
            var testContext = __assign(__assign({}, context), { toDate: today, onMonthChange: jest.fn() });
            beforeEach(function () {
                test_1.customRender(React.createElement(Caption_1.Caption, { displayMonth: today }), testContext);
                po.runNextClick();
            });
            test('should call the `onMonthChange` callback', function () {
                expect(testContext.onMonthChange).not.toHaveBeenCalled();
            });
        });
    });
});
//# sourceMappingURL=Caption.test.js.map