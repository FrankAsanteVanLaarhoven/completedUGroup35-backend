"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
var test_1 = require("../../test");
var Button_1 = require("./Button");
var po = new test_1.PageObjects(new Date());
describe('when rendered without props', function () {
    beforeEach(function () {
        test_1.customRender(React.createElement(Button_1.Button, { className: "foo", style: { color: 'blue' } }));
    });
    test('should render a button with type "button"', function () {
        expect(po.button).toHaveAttribute('type', 'button');
    });
    test('should render a button with the button class name', function () {
        expect(po.button).toHaveClass('rdp-button');
    });
    test('should render a button with the reset class name', function () {
        expect(po.button).toHaveClass('rdp-button_reset');
    });
    test('should add the class name', function () {
        expect(po.button).toHaveClass('foo');
    });
    test('should apply the style', function () {
        expect(po.button).toHaveStyle({ color: 'blue' });
    });
});
describe('when using class names and styles from context', function () {
    beforeEach(function () {
        test_1.customRender(React.createElement(Button_1.Button, null), {
            classNames: { button: 'foo' },
            styles: { button: { color: 'red' } }
        });
    });
    test('should apply the style', function () {
        expect(po.button).toHaveStyle({ color: 'red' });
    });
    test('should apply the class name', function () {
        expect(po.button).toHaveClass('foo');
    });
});
//# sourceMappingURL=Button.test.js.map