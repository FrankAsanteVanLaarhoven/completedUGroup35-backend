import { OrientationParam, PaginationParams } from '../../types/request';
import * as Photo from './types';
declare type PhotoId = {
    photoId: string;
};
export declare const list: {
    handleRequest: (a: PaginationParams | undefined, additionalFetchOptions?: import("../../helpers/request").AdditionalFetchOptions | undefined) => import("../../helpers/request").CompleteRequestParams;
    handleResponse: import("../../helpers/response").HandleResponse<{
        results: Photo.Basic[];
        total: number;
    }>;
};
export declare const get: {
    handleRequest: (a: PhotoId, additionalFetchOptions?: import("../../helpers/request").AdditionalFetchOptions | undefined) => import("../../helpers/request").CompleteRequestParams;
    handleResponse: import("../../helpers/response").HandleResponse<Photo.Full>;
};
export declare const getStats: {
    handleRequest: (a: PhotoId, additionalFetchOptions?: import("../../helpers/request").AdditionalFetchOptions | undefined) => import("../../helpers/request").CompleteRequestParams;
    handleResponse: import("../../helpers/response").HandleResponse<Photo.Stats>;
};
export declare const getRandom: {
    handleRequest: (a: ({
        collectionIds?: string[] | undefined;
        featured?: boolean | undefined;
        username?: string | undefined;
        query?: string | undefined;
        contentFilter?: "low" | "high" | undefined;
        count?: number | undefined;
    } & OrientationParam) | undefined, additionalFetchOptions?: import("../../helpers/request").AdditionalFetchOptions | undefined) => import("../../helpers/request").CompleteRequestParams;
    handleResponse: import("../../helpers/response").HandleResponse<Photo.Random | Photo.Random[]>;
};
export declare const trackDownload: {
    handleRequest: (a: {
        downloadLocation: string;
    }, additionalFetchOptions?: import("../../helpers/request").AdditionalFetchOptions | undefined) => import("../../helpers/request").CompleteRequestParams;
    handleResponse: import("../../helpers/response").HandleResponse<{
        url: string;
    }>;
};
export {};
