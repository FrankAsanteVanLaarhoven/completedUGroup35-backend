'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _objectSpread = require('@babel/runtime/helpers/objectSpread2');
var _objectWithoutProperties = require('@babel/runtime/helpers/objectWithoutProperties');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var Controller_dist_fields = require('../../../../../Controller/dist/fields.cjs.prod.js');
require('@babel/runtime/helpers/classCallCheck');
require('lodash.isequal');

class SelectController extends Controller_dist_fields['default'] {
  constructor(_ref, ...args) {
    let {
      defaultValue = null
    } = _ref,
        config = _objectWithoutProperties(_ref, ["defaultValue"]);

    super(_objectSpread(_objectSpread({}, config), {}, {
      defaultValue
    }), ...args);

    _defineProperty(this, "getFilterGraphQL", ({
      value: {
        inverted,
        options
      }
    }) => {
      if (!options.length) {
        return '';
      }

      const isMulti = options.length > 1;
      let key = this.path;

      if (isMulti && inverted) {
        key = `${this.path}_not_in`;
      } else if (isMulti) {
        key = `${this.path}_in`;
      } else if (inverted) {
        key = `${this.path}_not`;
      }

      const value = isMulti ? options.map(x => x.value) : options[0].value;
      return {
        [key]: value
      };
    });

    _defineProperty(this, "getFilterLabel", () =>
    /*{ value }*/
    {
      return this.label;
    });

    _defineProperty(this, "formatFilter", ({
      value
    }) => {
      if (!value.options.length) {
        return value.inverted ? `${this.label} is set` : `${this.label} has no value`;
      }

      if (value.options.length > 1) {
        const values = value.options.map(i => i.label).join(', ');
        return value.inverted ? `${this.label} is not in [${values}]` : `${this.label} is in [${values}]`;
      }

      const optionLabel = value.options[0].label;
      return value.inverted ? `${this.label} is not ${optionLabel}` : `${this.label} is ${optionLabel}`;
    });

    _defineProperty(this, "getFilterValue", value => {
      return value && value.options && value.options.length ? value : undefined;
    });

    _defineProperty(this, "getFilterTypes", () => [{
      type: 'is',
      label: 'Matches',
      getInitialValue: () => ({
        inverted: false,
        options: []
      })
    }]);

    this.options = config.options;
    this.dataType = config.dataType;
  }

}

exports.default = SelectController;
