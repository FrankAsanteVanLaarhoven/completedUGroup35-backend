'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _objectSpread = require('@babel/runtime/helpers/objectSpread2');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var Controller_dist_fields = require('../../../../../Controller/dist/fields.cjs.dev.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('@babel/runtime/helpers/classCallCheck');
require('lodash.isequal');

class RelationshipController extends Controller_dist_fields['default'] {
  constructor(config, ...args) {
    const {
      defaultValue = config.many ? [] : null
    } = config;
    super(_objectSpread(_objectSpread({}, config), {}, {
      defaultValue
    }), ...args);

    _defineProperty(this, "getQueryFragment", (path = this.path) => {
      return `
      ${path} {
        id
        _label_
      }
    `;
    });

    _defineProperty(this, "getFilterGraphQL", ({
      type,
      value
    }) => {
      if (type === 'contains') {
        return {
          [`${this.path}_some`]: {
            id: value
          }
        };
      } else if (type === 'is') {
        return {
          [`${this.path}`]: {
            id: value
          }
        };
      }
    });

    _defineProperty(this, "getFilterLabel", ({
      label
    }) => {
      return `${this.label} ${label.toLowerCase()}`;
    });

    _defineProperty(this, "formatFilter", ({
      label,
      value
    }) => {
      return `${this.getFilterLabel({
        label
      })}: "${value}"`;
    });

    _defineProperty(this, "serialize", data => {
      const {
        path
      } = this;
      const {
        many
      } = this.config;
      let value = data[path];

      if (many) {
        let ids = [];

        if (Array.isArray(value)) {
          ids = value.map(x => x.id);
        }

        return {
          disconnectAll: true,
          connect: ids.map(id => ({
            id
          }))
        };
      }

      if (!value) {
        return {
          disconnectAll: true
        };
      }

      return {
        connect: {
          id: value.id
        }
      };
    });

    _defineProperty(this, "getFilterTypes", () => {
      const {
        many
      } = this.config;

      if (many) {
        return [{
          type: 'contains',
          label: 'Contains',
          getInitialValue: () => null
        }];
      } else {
        return [{
          type: 'is',
          label: 'Is',
          getInitialValue: () => null
        }];
      }
    });
  }

  getRefList() {
    return this.getListByKey(this.config.ref);
  }

}

exports.default = RelationshipController;
