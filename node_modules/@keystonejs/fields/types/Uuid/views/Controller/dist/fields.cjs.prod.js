'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var Controller_dist_fields = require('../../../../../Controller/dist/fields.cjs.prod.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('@babel/runtime/helpers/classCallCheck');
require('lodash.isequal');

class UuidController extends Controller_dist_fields['default'] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "getFilterGraphQL", ({
      type,
      value
    }) => {
      switch (type) {
        case 'is':
          {
            return {
              [this.path]: value
            };
          }

        case 'not':
          {
            return {
              [`${this.path}_not`]: value
            };
          }

        case 'in':
          {
            return {
              [`${this.path}_in`]: value.split(',').map(value => value.trim())
            };
          }

        case 'not_in':
          {
            return {
              [`${this.path}_not_in`]: value.split(',').map(value => value.trim())
            };
          }
      }
    });

    _defineProperty(this, "getFilterLabel", ({
      label,
      type
    }) => {
      let suffix = '';

      if (['in', 'not_in'].includes(type)) {
        suffix = ' (comma separated)';
      }

      return `${this.label} ${label.toLowerCase()}${suffix}`;
    });

    _defineProperty(this, "formatFilter", ({
      label,
      type,
      value
    }) => {
      let renderedValue = value;

      if (['in', 'not_in'].includes(type)) {
        renderedValue = value.split(',').map(value => value.trim()).join(', ');
      }

      return `${this.label} ${label.toLowerCase()}: ${renderedValue}`;
    });

    _defineProperty(this, "getFilterTypes", () => [{
      type: 'is',
      label: 'Is exactly',
      getInitialValue: () => ''
    }, {
      type: 'not',
      label: 'Is not',
      getInitialValue: () => ''
    }, {
      type: 'in',
      label: 'Is one of',
      getInitialValue: () => ''
    }, {
      type: 'not_in',
      label: 'Is not one of',
      getInitialValue: () => ''
    }]);
  }

}

exports.default = UuidController;
