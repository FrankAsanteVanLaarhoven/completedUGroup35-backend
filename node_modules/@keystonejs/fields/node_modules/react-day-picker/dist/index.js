(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("date-fns"), require("react"));
	else if(typeof define === 'function' && define.amd)
		define(["date-fns", "react"], factory);
	else if(typeof exports === 'object')
		exports["DayPicker"] = factory(require("date-fns"), require("react"));
	else
		root["DayPicker"] = factory(root["DateFns"], root["React"]);
})(self, function(__WEBPACK_EXTERNAL_MODULE__259__, __WEBPACK_EXTERNAL_MODULE__698__) {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 348:
/***/ ((module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = buildFormatLongFn;

function buildFormatLongFn(args) {
  return function (dirtyOptions) {
    var options = dirtyOptions || {};
    var width = options.width ? String(options.width) : args.defaultWidth;
    var format = args.formats[width] || args.formats[args.defaultWidth];
    return format;
  };
}

module.exports = exports.default;

/***/ }),

/***/ 738:
/***/ ((module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = buildLocalizeFn;

function buildLocalizeFn(args) {
  return function (dirtyIndex, dirtyOptions) {
    var options = dirtyOptions || {};
    var context = options.context ? String(options.context) : 'standalone';
    var valuesArray;

    if (context === 'formatting' && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options.width ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;

      var _width = options.width ? String(options.width) : args.defaultWidth;

      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }

    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
    return valuesArray[index];
  };
}

module.exports = exports.default;

/***/ }),

/***/ 653:
/***/ ((module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = buildMatchFn;

function buildMatchFn(args) {
  return function (dirtyString, dirtyOptions) {
    var string = String(dirtyString);
    var options = dirtyOptions || {};
    var width = options.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);

    if (!matchResult) {
      return null;
    }

    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var value;

    if (Object.prototype.toString.call(parsePatterns) === '[object Array]') {
      value = findIndex(parsePatterns, function (pattern) {
        return pattern.test(matchedString);
      });
    } else {
      value = findKey(parsePatterns, function (pattern) {
        return pattern.test(matchedString);
      });
    }

    value = args.valueCallback ? args.valueCallback(value) : value;
    value = options.valueCallback ? options.valueCallback(value) : value;
    return {
      value: value,
      rest: string.slice(matchedString.length)
    };
  };
}

function findKey(object, predicate) {
  for (var key in object) {
    if (object.hasOwnProperty(key) && predicate(object[key])) {
      return key;
    }
  }
}

function findIndex(array, predicate) {
  for (var key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
}

module.exports = exports.default;

/***/ }),

/***/ 604:
/***/ ((module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = buildMatchPatternFn;

function buildMatchPatternFn(args) {
  return function (dirtyString, dirtyOptions) {
    var string = String(dirtyString);
    var options = dirtyOptions || {};
    var matchResult = string.match(args.matchPattern);

    if (!matchResult) {
      return null;
    }

    var matchedString = matchResult[0];
    var parseResult = string.match(args.parsePattern);

    if (!parseResult) {
      return null;
    }

    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    return {
      value: value,
      rest: string.slice(matchedString.length)
    };
  };
}

module.exports = exports.default;

/***/ }),

/***/ 361:
/***/ ((module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = formatDistance;
var formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'less than a second',
    other: 'less than {{count}} seconds'
  },
  xSeconds: {
    one: '1 second',
    other: '{{count}} seconds'
  },
  halfAMinute: 'half a minute',
  lessThanXMinutes: {
    one: 'less than a minute',
    other: 'less than {{count}} minutes'
  },
  xMinutes: {
    one: '1 minute',
    other: '{{count}} minutes'
  },
  aboutXHours: {
    one: 'about 1 hour',
    other: 'about {{count}} hours'
  },
  xHours: {
    one: '1 hour',
    other: '{{count}} hours'
  },
  xDays: {
    one: '1 day',
    other: '{{count}} days'
  },
  aboutXWeeks: {
    one: 'about 1 week',
    other: 'about {{count}} weeks'
  },
  xWeeks: {
    one: '1 week',
    other: '{{count}} weeks'
  },
  aboutXMonths: {
    one: 'about 1 month',
    other: 'about {{count}} months'
  },
  xMonths: {
    one: '1 month',
    other: '{{count}} months'
  },
  aboutXYears: {
    one: 'about 1 year',
    other: 'about {{count}} years'
  },
  xYears: {
    one: '1 year',
    other: '{{count}} years'
  },
  overXYears: {
    one: 'over 1 year',
    other: 'over {{count}} years'
  },
  almostXYears: {
    one: 'almost 1 year',
    other: 'almost {{count}} years'
  }
};

function formatDistance(token, count, options) {
  options = options || {};
  var result;

  if (typeof formatDistanceLocale[token] === 'string') {
    result = formatDistanceLocale[token];
  } else if (count === 1) {
    result = formatDistanceLocale[token].one;
  } else {
    result = formatDistanceLocale[token].other.replace('{{count}}', count);
  }

  if (options.addSuffix) {
    if (options.comparison > 0) {
      return 'in ' + result;
    } else {
      return result + ' ago';
    }
  }

  return result;
}

module.exports = exports.default;

/***/ }),

/***/ 780:
/***/ ((module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = void 0;

var _index = _interopRequireDefault(__webpack_require__(348));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var dateFormats = {
  full: 'EEEE, MMMM do, y',
  long: 'MMMM do, y',
  medium: 'MMM d, y',
  short: 'MM/dd/yyyy'
};
var timeFormats = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong = {
  date: (0, _index.default)({
    formats: dateFormats,
    defaultWidth: 'full'
  }),
  time: (0, _index.default)({
    formats: timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0, _index.default)({
    formats: dateTimeFormats,
    defaultWidth: 'full'
  })
};
var _default = formatLong;
exports.default = _default;
module.exports = exports.default;

/***/ }),

/***/ 663:
/***/ ((module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = formatRelative;
var formatRelativeLocale = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: 'P'
};

function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale[token];
}

module.exports = exports.default;

/***/ }),

/***/ 350:
/***/ ((module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = void 0;

var _index = _interopRequireDefault(__webpack_require__(738));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var eraValues = {
  narrow: ['B', 'A'],
  abbreviated: ['BC', 'AD'],
  wide: ['Before Christ', 'Anno Domini']
};
var quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter'] // Note: in English, the names of days of the week and months are capitalized.
  // If you are making a new locale based on this one, check if the same is true for the language you're working on.
  // Generally, formatted dates should look like they are in the middle of a sentence,
  // e.g. in Spanish language the weekdays and months should be in the lowercase.

};
var monthValues = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
};
var dayValues = {
  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
};
var dayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mi',
    noon: 'n',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mi',
    noon: 'n',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  }
};

function ordinalNumber(dirtyNumber, _dirtyOptions) {
  var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,
  // if they are different for different grammatical genders,
  // use `options.unit`:
  //
  //   var options = dirtyOptions || {}
  //   var unit = String(options.unit)
  //
  // where `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
  // 'day', 'hour', 'minute', 'second'

  var rem100 = number % 100;

  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + 'st';

      case 2:
        return number + 'nd';

      case 3:
        return number + 'rd';
    }
  }

  return number + 'th';
}

var localize = {
  ordinalNumber: ordinalNumber,
  era: (0, _index.default)({
    values: eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0, _index.default)({
    values: quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function (quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: (0, _index.default)({
    values: monthValues,
    defaultWidth: 'wide'
  }),
  day: (0, _index.default)({
    values: dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0, _index.default)({
    values: dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
var _default = localize;
exports.default = _default;
module.exports = exports.default;

/***/ }),

/***/ 49:
/***/ ((module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = void 0;

var _index = _interopRequireDefault(__webpack_require__(604));

var _index2 = _interopRequireDefault(__webpack_require__(653));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match = {
  ordinalNumber: (0, _index.default)({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function (value) {
      return parseInt(value, 10);
    }
  }),
  era: (0, _index2.default)({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0, _index2.default)({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function (index) {
      return index + 1;
    }
  }),
  month: (0, _index2.default)({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0, _index2.default)({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0, _index2.default)({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
var _default = match;
exports.default = _default;
module.exports = exports.default;

/***/ }),

/***/ 626:
/***/ ((module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.default = void 0;

var _index = _interopRequireDefault(__webpack_require__(361));

var _index2 = _interopRequireDefault(__webpack_require__(780));

var _index3 = _interopRequireDefault(__webpack_require__(663));

var _index4 = _interopRequireDefault(__webpack_require__(350));

var _index5 = _interopRequireDefault(__webpack_require__(49));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @type {Locale}
 * @category Locales
 * @summary English locale (United States).
 * @language English
 * @iso-639-2 eng
 * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
 * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
 */
var locale = {
  code: 'en-US',
  formatDistance: _index.default,
  formatLong: _index2.default,
  formatRelative: _index3.default,
  localize: _index4.default,
  match: _index5.default,
  options: {
    weekStartsOn: 0
    /* Sunday */
    ,
    firstWeekContainsDate: 1
  }
};
var _default = locale;
exports.default = _default;
module.exports = exports.default;

/***/ }),

/***/ 130:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Caption": () => (/* reexport */ Caption),
  "Day": () => (/* reexport */ Day),
  "DayPicker": () => (/* reexport */ DayPicker),
  "Head": () => (/* reexport */ Head),
  "Navigation": () => (/* reexport */ Navigation),
  "NextIcon": () => (/* reexport */ NextIcon),
  "PrevIcon": () => (/* reexport */ PrevIcon),
  "Root": () => (/* reexport */ Root),
  "Row": () => (/* reexport */ Row),
  "Table": () => (/* reexport */ Table),
  "addToRange": () => (/* reexport */ addToRange),
  "defaultClassNames": () => (/* reexport */ defaultClassNames),
  "defaultLabels": () => (/* reexport */ defaultLabels),
  "defaultModifiers": () => (/* reexport */ defaultModifiers),
  "defaultModifiersClassNames": () => (/* reexport */ defaultModifiersClassNames),
  "defaultProps": () => (/* reexport */ defaultProps),
  "getCaptionComponent": () => (/* reexport */ getCaptionComponent),
  "getDayComponent": () => (/* reexport */ getDayComponent),
  "getModifiers": () => (/* reexport */ getModifiers),
  "getNavigationComponent": () => (/* reexport */ getNavigationComponent),
  "useInput": () => (/* reexport */ useInput),
  "useRange": () => (/* reexport */ useRange)
});

// EXTERNAL MODULE: external {"root":"DateFns","commonjs2":"date-fns","commonjs":"date-fns","amd":"date-fns"}
var external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_ = __webpack_require__(259);
// EXTERNAL MODULE: external {"root":"React","commonjs2":"react","commonjs":"react","amd":"react"}
var external_root_React_commonjs2_react_commonjs_react_amd_react_ = __webpack_require__(698);
var external_root_React_commonjs2_react_commonjs_react_amd_react_default = /*#__PURE__*/__webpack_require__.n(external_root_React_commonjs2_react_commonjs_react_amd_react_);
;// CONCATENATED MODULE: ./src/components/Day/utils/createClassName.ts
function createClassName(day, modifiers, props) {
    var classNames = props.classNames, modifiersClassNames = props.modifiersClassNames;
    var className = [];
    if (classNames === null || classNames === void 0 ? void 0 : classNames.Day) {
        className.push(classNames.Day);
    }
    Object.keys(modifiers)
        .filter(function (modifier) { return Boolean(modifiers[modifier]); })
        .forEach(function (modifier) {
        if (classNames === null || classNames === void 0 ? void 0 : classNames[modifier]) {
            className.push(classNames[modifier]);
        }
        if (modifiersClassNames === null || modifiersClassNames === void 0 ? void 0 : modifiersClassNames[modifier]) {
            className.push(modifiersClassNames[modifier]);
        }
    });
    return className.join(' ');
}

;// CONCATENATED MODULE: ./src/components/Day/utils/createEventHandlers.ts

function createEventHandlers(day, modifiers, props) {
    var onClick = function (e) {
        var _a;
        (_a = props === null || props === void 0 ? void 0 : props.onDayClick) === null || _a === void 0 ? void 0 : _a.call(props, day, modifiers, e);
    };
    var onFocus = function (e) {
        var _a;
        (_a = props.onDayFocus) === null || _a === void 0 ? void 0 : _a.call(props, day, modifiers, e);
    };
    var onBlur = function (e) {
        var _a;
        (_a = props.onDayBlur) === null || _a === void 0 ? void 0 : _a.call(props, day, modifiers, e);
    };
    var onKeyDown = function (e) {
        var _a, _b, _c, _d, _e;
        switch (e.code) {
            case 'ArrowLeft': {
                e.preventDefault();
                e.stopPropagation();
                var nextDay = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.addDays)(day, -1);
                (_a = props.onDayFocus) === null || _a === void 0 ? void 0 : _a.call(props, nextDay, modifiers, e);
                break;
            }
            case 'ArrowRight': {
                e.preventDefault();
                e.stopPropagation();
                var nextDay = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.addDays)(day, 1);
                (_b = props.onDayFocus) === null || _b === void 0 ? void 0 : _b.call(props, nextDay, modifiers, e);
                return;
            }
            case 'ArrowUp': {
                e.preventDefault();
                e.stopPropagation();
                var nextDay = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.addWeeks)(day, -1);
                (_c = props.onDayFocus) === null || _c === void 0 ? void 0 : _c.call(props, nextDay, modifiers, e);
                break;
            }
            case 'ArrowDown': {
                e.preventDefault();
                e.stopPropagation();
                var nextDay = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.addWeeks)(day, 1);
                (_d = props.onDayFocus) === null || _d === void 0 ? void 0 : _d.call(props, nextDay, modifiers, e);
                break;
            }
            case 'Space':
            case 'Enter': {
                if (!props.onDayClick)
                    return;
                props.onDayClick(day, modifiers, e);
                e.preventDefault();
                e.stopPropagation();
                break;
            }
        }
        (_e = props === null || props === void 0 ? void 0 : props.onDayKeyDown) === null || _e === void 0 ? void 0 : _e.call(props, day, modifiers, e);
    };
    var onKeyUp = function (e) {
        var _a;
        (_a = props.onDayKeyUp) === null || _a === void 0 ? void 0 : _a.call(props, day, modifiers, e);
    };
    var onKeyPress = function (e) {
        var _a;
        (_a = props.onDayKeyPress) === null || _a === void 0 ? void 0 : _a.call(props, day, modifiers, e);
    };
    var onMouseEnter = function (e) {
        var _a;
        (_a = props.onDayMouseEnter) === null || _a === void 0 ? void 0 : _a.call(props, day, modifiers, e);
    };
    var onMouseLeave = function (e) {
        var _a;
        (_a = props.onDayMouseLeave) === null || _a === void 0 ? void 0 : _a.call(props, day, modifiers, e);
    };
    var onTouchCancel = function (e) {
        var _a;
        (_a = props.onDayTouchCancel) === null || _a === void 0 ? void 0 : _a.call(props, day, modifiers, e);
    };
    var onTouchEnd = function (e) {
        var _a;
        (_a = props.onDayTouchEnd) === null || _a === void 0 ? void 0 : _a.call(props, day, modifiers, e);
    };
    var onTouchMove = function (e) {
        var _a;
        (_a = props.onDayTouchMove) === null || _a === void 0 ? void 0 : _a.call(props, day, modifiers, e);
    };
    var onTouchStart = function (e) {
        var _a;
        (_a = props.onDayTouchStart) === null || _a === void 0 ? void 0 : _a.call(props, day, modifiers, e);
    };
    return {
        onClick: onClick,
        onFocus: onFocus,
        onBlur: onBlur,
        onKeyDown: onKeyDown,
        onKeyUp: onKeyUp,
        onKeyPress: onKeyPress,
        onMouseEnter: onMouseEnter,
        onMouseLeave: onMouseLeave,
        onTouchCancel: onTouchCancel,
        onTouchEnd: onTouchEnd,
        onTouchMove: onTouchMove,
        onTouchStart: onTouchStart
    };
}

;// CONCATENATED MODULE: ./src/components/Day/utils/createStyle.ts
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function createStyle(day, modifiers, props) {
    var modifiersStyles = props.modifiersStyles, styles = props.styles;
    var style = __assign({}, styles === null || styles === void 0 ? void 0 : styles.Day);
    if (styles) {
        Object.keys(modifiers).forEach(function (modifier) {
            style = __assign(__assign({}, style), styles[modifier]);
        });
    }
    if (modifiersStyles) {
        Object.keys(modifiers).forEach(function (modifier) {
            style = __assign(__assign({}, style), modifiersStyles[modifier]);
        });
    }
    return style;
}

;// CONCATENATED MODULE: ./src/components/Day/utils/createTabIndex.ts

function createTabIndex(day, modifiers, props) {
    if (!modifiers.interactive)
        return;
    var tabIndex;
    if (props.focusedDay && (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.isSameDay)(day, props.focusedDay)) {
        tabIndex = 0;
    }
    else if ((0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.isSameDay)(day, new Date())) {
        tabIndex = 0;
    }
    else if (!(0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.isSameDay)(day, new Date()) &&
        !(0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.isSameMonth)(day, new Date()) &&
        day.getDate() === 1) {
        tabIndex = 0;
    }
    else {
        tabIndex = -1;
    }
    return tabIndex;
}

;// CONCATENATED MODULE: ./src/components/Head/utils/getWeekdays.ts

/**
 * Generate a series of 7 days, starting from the week, to use for getting the
 * week day names.
 */
function getWeekdays(locale) {
    var start = external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfWeek(new Date(), { locale: locale });
    var days = [];
    for (var i = 0; i < 7; i++) {
        var day = external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.addDays(start, i);
        days.push(day);
    }
    return days;
}

;// CONCATENATED MODULE: ./src/components/Head/Head.tsx


function Head(props) {
    var _a = props.dayPickerProps, classNames = _a.classNames, styles = _a.styles, formatWeekdayName = _a.formatWeekdayName, labelsFormatters = _a.labelsFormatters, locale = _a.locale, showWeekNumber = _a.showWeekNumber;
    var weekdays = getWeekdays(locale);
    return (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("thead", { style: styles === null || styles === void 0 ? void 0 : styles.Head, className: classNames === null || classNames === void 0 ? void 0 : classNames.Head },
        external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("tr", { style: styles === null || styles === void 0 ? void 0 : styles.HeadRow, className: classNames === null || classNames === void 0 ? void 0 : classNames.HeadRow },
            showWeekNumber && (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("th", { style: styles === null || styles === void 0 ? void 0 : styles.HeadCell, className: classNames === null || classNames === void 0 ? void 0 : classNames.HeadCell })),
            weekdays.map(function (weekday, i) { return (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("th", { key: i, scope: "col", style: styles === null || styles === void 0 ? void 0 : styles.HeadCell, className: classNames === null || classNames === void 0 ? void 0 : classNames.HeadCell, "aria-label": labelsFormatters.headCell(weekday, props.dayPickerProps) }, formatWeekdayName(weekday, { locale: locale }))); }))));
}

;// CONCATENATED MODULE: ./src/components/Head/index.ts


;// CONCATENATED MODULE: ./src/components/Row/Row.tsx


function Row(props) {
    var weekNumber = props.weekNumber, week = props.week, currentMonth = props.currentMonth, dayPickerProps = props.dayPickerProps;
    var labelsFormatters = dayPickerProps.labelsFormatters, showWeekNumber = dayPickerProps.showWeekNumber, formatWeekNumber = dayPickerProps.formatWeekNumber, locale = dayPickerProps.locale, classNames = dayPickerProps.classNames, styles = dayPickerProps.styles, components = dayPickerProps.components;
    var Day = components.Day;
    return (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("tr", { className: classNames === null || classNames === void 0 ? void 0 : classNames.Row, style: styles === null || styles === void 0 ? void 0 : styles.Row },
        showWeekNumber && (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("th", { className: classNames === null || classNames === void 0 ? void 0 : classNames.RowHead, style: styles === null || styles === void 0 ? void 0 : styles.RowHead, "aria-label": labelsFormatters.rowHead(Number(weekNumber), dayPickerProps) }, formatWeekNumber(Number(weekNumber), { locale: locale }))),
        week.map(function (day) { return (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("td", { className: classNames === null || classNames === void 0 ? void 0 : classNames.Cell, style: styles === null || styles === void 0 ? void 0 : styles.Cell, key: (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.getUnixTime)(day) },
            external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement(Day, { day: day, dayPickerProps: dayPickerProps, currentMonth: currentMonth }))); })));
}

;// CONCATENATED MODULE: ./src/components/Row/index.ts


;// CONCATENATED MODULE: ./src/components/Table/utils/getOutsideEndDays.ts

function getOutsideEndDays(month, props) {
    var locale = props.locale;
    var days = [];
    var lastDayOfWeek = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.endOfWeek)(month, { locale: locale });
    var endDiff = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.differenceInDays)(lastDayOfWeek, month);
    for (var i = 1; i <= endDiff; i++) {
        var dayDate = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.addDays)(month, i);
        days.push(dayDate);
    }
    return days;
}

;// CONCATENATED MODULE: ./src/components/Table/utils/getOutsideStartDays.ts

function getOutsideStartDays(month, props) {
    var locale = props.locale;
    var days = [];
    var firstDayOfWeek = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfWeek)(month, { locale: locale });
    var startDiff = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.differenceInDays)(month, firstDayOfWeek);
    for (var i = 0; i < startDiff; i++) {
        var newDay = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.addDays)(firstDayOfWeek, i);
        days.push(newDay);
    }
    return days;
}

;// CONCATENATED MODULE: ./src/components/Table/utils/getWeeks.ts



/**
 * Return the weeks belonging to the given month.
 */
function getWeeks(month, props) {
    var locale = props.locale, fixedWeeks = props.fixedWeeks;
    var monthStart = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfMonth)(month);
    var monthEnd = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.endOfMonth)(month);
    var diff = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.differenceInDays)(monthEnd, monthStart);
    var weeks = {};
    var lastWeekStr = '';
    for (var i = 0; i <= diff; i++) {
        var date = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.addDays)(monthStart, i);
        var week = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.getWeek)(date, { locale: locale });
        if (week === 1 && (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.getMonth)(date) === 11) {
            week = 53;
        }
        var weekStr = week.toString();
        if (!weeks[weekStr]) {
            var startDays = getOutsideStartDays(date, props);
            // Create a new week by adding outside start days
            weeks[weekStr] = startDays;
        }
        weeks[weekStr].push(date);
        lastWeekStr = weekStr;
    }
    var lastWeek = weeks[lastWeekStr];
    var lastDay = lastWeek[lastWeek.length - 1];
    var endDays = getOutsideEndDays(lastDay, props);
    weeks[lastWeekStr] = lastWeek.concat(endDays);
    // Add extra weeks to the month, up to 6 weeks
    if (fixedWeeks) {
        lastWeek = weeks[lastWeekStr];
        var lastWeekDate = lastWeek[lastWeek.length - 1];
        var weeksInMonth = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.getWeeksInMonth)(month, { locale: locale });
        if (weeksInMonth < 6) {
            var diffDays = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.differenceInDays)((0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.addWeeks)(lastWeekDate, 6 - weeksInMonth), lastWeekDate);
            for (var i = 0; i < diffDays; i++) {
                var date = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.addDays)(lastWeekDate, i + 1);
                var week = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.getWeek)(date, { locale: locale });
                if (week === 1 && (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.getMonth)(month) === 11) {
                    week = 53;
                }
                if (!weeks[week]) {
                    weeks[week] = [];
                }
                weeks[week.toString()].push(date);
            }
        }
    }
    return weeks;
}

;// CONCATENATED MODULE: ./src/components/Table/Table.tsx




function Table(props) {
    var month = props.month, dayPickerProps = props.dayPickerProps;
    var classNames = dayPickerProps.classNames, styles = dayPickerProps.styles, showCaption = dayPickerProps.showCaption, showHead = dayPickerProps.showHead, components = dayPickerProps.components;
    var Caption = components.Caption;
    var weeks = getWeeks(month, dayPickerProps);
    return (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("table", { className: classNames === null || classNames === void 0 ? void 0 : classNames.Table, style: styles === null || styles === void 0 ? void 0 : styles.Table },
        showCaption && external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement(Caption, { month: month, dayPickerProps: dayPickerProps }),
        showHead && external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement(Head, { dayPickerProps: dayPickerProps }),
        external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("tbody", { className: classNames === null || classNames === void 0 ? void 0 : classNames.TBody, style: styles === null || styles === void 0 ? void 0 : styles.TBody }, Object.keys(weeks).map(function (weekNumber) { return (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement(Row, { currentMonth: month, key: weekNumber, week: weeks[weekNumber], weekNumber: Number(weekNumber), dayPickerProps: dayPickerProps })); }))));
}

;// CONCATENATED MODULE: ./src/components/Table/index.ts


;// CONCATENATED MODULE: ./src/components/Root/utils/getMonths.ts

/**
 * Get the months to render in DayPicker according to the passed
 * `numberOfMonths` and other month-related props.
 */
function getMonths(props) {
    var month = props.month, numberOfMonths = props.numberOfMonths, toMonth = props.toMonth, fromMonth = props.fromMonth, reverseMonths = props.reverseMonths;
    var start = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfMonth)(month);
    var end = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfMonth)((0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.addMonths)(start, numberOfMonths));
    var monthsDiff = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.differenceInMonths)(end, start);
    var months = [];
    for (var i = 0; i < monthsDiff; i++) {
        var nextMonth = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.addMonths)(start, i);
        if (toMonth && nextMonth > (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfMonth)(toMonth)) {
            // Skip months after toMonth
            continue;
        }
        if (fromMonth && nextMonth < (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfMonth)(fromMonth)) {
            // Skip months before fromMonth
            continue;
        }
        months.push(nextMonth);
    }
    if (reverseMonths) {
        months = months.reverse();
    }
    return months;
}

;// CONCATENATED MODULE: ./src/components/Root/Root.tsx
var Root_assign = (undefined && undefined.__assign) || function () {
    Root_assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return Root_assign.apply(this, arguments);
};




function Root(props) {
    var _a;
    var monthsEl = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
    var dayPickerProps = props.dayPickerProps;
    var components = dayPickerProps.components, className = dayPickerProps.className, classNames = dayPickerProps.classNames, style = dayPickerProps.style, styles = dayPickerProps.styles, dir = dayPickerProps.dir, showNavigation = dayPickerProps.showNavigation, onMonthChange = dayPickerProps.onMonthChange, month = dayPickerProps.month;
    var Navigation = components.Navigation;
    var months = getMonths(dayPickerProps);
    var rootClassNames = [(_a = classNames === null || classNames === void 0 ? void 0 : classNames.Root) !== null && _a !== void 0 ? _a : ''];
    if (className) {
        rootClassNames.concat(className.split(' '));
    }
    var _b = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false), focused = _b[0], setFocused = _b[1];
    var handleKeyDown = function (e) {
        if (!focused)
            return;
        if (e.key === (dir === 'rtl' ? 'ArrowRight' : 'ArrowLeft')) {
            onMonthChange === null || onMonthChange === void 0 ? void 0 : onMonthChange((0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.addMonths)(month, 1), e);
        }
        if (e.key === (dir === 'rtl' ? 'ArrowLeft' : 'ArrowRight')) {
            onMonthChange === null || onMonthChange === void 0 ? void 0 : onMonthChange((0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.addMonths)(month, -1), e);
        }
    };
    var handleFocus = function (e) {
        if (e.target !== monthsEl.current)
            return;
        setFocused(true);
    };
    var handleBlur = function () {
        if (!focused)
            return;
        setFocused(false);
    };
    return (external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement("div", { className: rootClassNames.join(' '), style: Root_assign(Root_assign({}, styles === null || styles === void 0 ? void 0 : styles.Root), style), dir: dir },
        external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement("div", { className: classNames === null || classNames === void 0 ? void 0 : classNames.Months, style: styles === null || styles === void 0 ? void 0 : styles.Month, tabIndex: 0, onFocus: handleFocus, onBlur: handleBlur, onKeyDown: handleKeyDown, ref: monthsEl }, months.map(function (month) { return (external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement("div", { className: classNames === null || classNames === void 0 ? void 0 : classNames.Month, key: (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.getTime)(month) },
            external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement(Table, { month: month, dayPickerProps: dayPickerProps }))); })),
        showNavigation && onMonthChange && (external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement(Navigation, { dayPickerProps: dayPickerProps }))));
}

;// CONCATENATED MODULE: ./src/components/Root/index.ts


// EXTERNAL MODULE: ../../node_modules/date-fns/locale/en-US/index.js
var en_US = __webpack_require__(626);
var en_US_default = /*#__PURE__*/__webpack_require__.n(en_US);
;// CONCATENATED MODULE: ./src/components/Caption/getCaptionComponent.ts
function getCaptionComponent(props) {
    var _a, _b;
    return {
        rootProps: {
            'aria-atomic': true,
            'aria-live': 'polite',
            className: (_a = props.classNames) === null || _a === void 0 ? void 0 : _a.Caption,
            style: (_b = props.styles) === null || _b === void 0 ? void 0 : _b.Caption
        }
    };
}

;// CONCATENATED MODULE: ./src/components/Caption/Caption.tsx
var Caption_assign = (undefined && undefined.__assign) || function () {
    Caption_assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return Caption_assign.apply(this, arguments);
};


function Caption(props) {
    var rootProps = getCaptionComponent(props.dayPickerProps).rootProps;
    var _a = props.dayPickerProps, locale = _a.locale, formatCaption = _a.formatCaption;
    return (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("caption", Caption_assign({}, rootProps), formatCaption(props.month, { locale: locale })));
}

;// CONCATENATED MODULE: ./src/components/Navigation/utils/getPrevNextMonths.ts

/**
 * Returns the next and the previous months that the user can navigate to.
 */
function getPrevNextMonths(props) {
    var fromMonth = props.fromMonth, toMonth = props.toMonth, month = props.month, numberOfMonths = props.numberOfMonths, pagedNavigation = props.pagedNavigation;
    var add = pagedNavigation ? numberOfMonths : 1;
    var currentMonth = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfMonth)(month !== null && month !== void 0 ? month : props.today);
    var prevMonth;
    if (!fromMonth || currentMonth > (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfMonth)(fromMonth)) {
        prevMonth = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.addMonths)(currentMonth, add * -1);
    }
    var nextMonth;
    if (!toMonth ||
        (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.addMonths)(currentMonth, numberOfMonths) <= (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfMonth)(toMonth)) {
        nextMonth = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.addMonths)(currentMonth, add);
    }
    return [prevMonth, nextMonth];
}

;// CONCATENATED MODULE: ./src/components/Navigation/getNavigationComponent.ts


/**
 * Return the props to apply to the elements of the [[Navigation]] component.
 */
function getNavigationComponent(props) {
    var _a, _b, _c, _d;
    var classNames = props.classNames, styles = props.styles, onMonthChange = props.onMonthChange;
    var _e = getPrevNextMonths(props), prevMonth = _e[0], nextMonth = _e[1];
    var rootProps = {
        className: classNames === null || classNames === void 0 ? void 0 : classNames.Nav,
        style: styles === null || styles === void 0 ? void 0 : styles.Nav
    };
    var onPrevClick = function (e) {
        if (!prevMonth)
            return;
        onMonthChange === null || onMonthChange === void 0 ? void 0 : onMonthChange(prevMonth, e);
    };
    var onNextClick = function (e) {
        if (!nextMonth)
            return;
        onMonthChange === null || onMonthChange === void 0 ? void 0 : onMonthChange(nextMonth, e);
    };
    var prevAriaLabel = prevMonth &&
        ((_b = (_a = props.labelsFormatters) === null || _a === void 0 ? void 0 : _a.navPrevButton(prevMonth, props)) !== null && _b !== void 0 ? _b : defaultLabels.navPrevButton(prevMonth, props));
    var nextAriaLabel = nextMonth &&
        ((_d = (_c = props.labelsFormatters) === null || _c === void 0 ? void 0 : _c.navNextButton(nextMonth, props)) !== null && _d !== void 0 ? _d : defaultLabels.navNextButton(nextMonth, props));
    var prevButtonProps = {
        className: classNames === null || classNames === void 0 ? void 0 : classNames.NavPrevButton,
        style: styles === null || styles === void 0 ? void 0 : styles.NavPrevButton,
        onClick: onPrevClick,
        disabled: !prevMonth,
        'aria-label': prevAriaLabel
    };
    var nextButtonProps = {
        className: classNames === null || classNames === void 0 ? void 0 : classNames.NavNextButton,
        style: styles === null || styles === void 0 ? void 0 : styles.NavNextButton,
        onClick: onNextClick,
        disabled: !nextMonth,
        'aria-label': nextAriaLabel
    };
    return {
        nextMonth: nextMonth,
        prevMonth: prevMonth,
        rootProps: rootProps,
        nextButtonProps: nextButtonProps,
        prevButtonProps: prevButtonProps
    };
}

;// CONCATENATED MODULE: ./src/components/Navigation/Navigation.tsx
var Navigation_assign = (undefined && undefined.__assign) || function () {
    Navigation_assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return Navigation_assign.apply(this, arguments);
};


function Navigation(props) {
    var dayPickerProps = props.dayPickerProps;
    var _a = getNavigationComponent(dayPickerProps), rootProps = _a.rootProps, nextButtonProps = _a.nextButtonProps, prevButtonProps = _a.prevButtonProps;
    var _b = dayPickerProps.components, PrevIcon = _b.PrevIcon, NextIcon = _b.NextIcon;
    var prevButton = (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("button", Navigation_assign({}, prevButtonProps, { key: "prev" }),
        external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement(PrevIcon, null)));
    var nextButton = (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("button", Navigation_assign({}, nextButtonProps, { key: "next" }),
        external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement(NextIcon, null)));
    var buttons = [prevButton, nextButton];
    if (dayPickerProps.dir === 'rtl') {
        buttons = buttons.reverse();
    }
    return external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("div", Navigation_assign({}, rootProps), buttons);
}

;// CONCATENATED MODULE: ./src/components/Navigation/index.ts



;// CONCATENATED MODULE: ./src/components/NextIcon/NextIcon.tsx

function NextIcon() {
    return (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("svg", { width: "13px", height: "15px", viewBox: "0 0 90 104" },
        external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("path", { d: "M85.8398441,45.2284776 C90.9347535,48.2085184 90.9197334,55.2575788 86.0742322,58.2716269 L12.1093751,102.259728 C6.93359406,105.482384 6.13177917e-08,102.943321 6.13177917e-08,97.1816026 L6.13177917e-08,6.65425865 C6.13177917e-08,0.971467303 6.36493744,-1.8613517 11.8800882,1.34152311 L85.8398441,45.2284776 Z", fill: "#000000", fillRule: "nonzero" })));
}

;// CONCATENATED MODULE: ./src/components/NextIcon/index.ts


;// CONCATENATED MODULE: ./src/components/PrevIcon/PrevIcon.tsx

function PrevIcon() {
    return (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("svg", { width: "13px", height: "15px", viewBox: "0 0 90 104" },
        external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("path", { d: "M3.845302,58.444536 C-1.330479,55.417193 -1.232823,48.19063 3.845302,45.260943 L77.575771,1.413286 C82.751552,-1.80937 89.685146,0.729693 89.685146,6.491411 L89.685146,97.018755 C89.685146,102.780474 83.142177,105.612505 77.575771,102.194536 L3.845302,58.444536 Z", fill: "#000000", fillRule: "nonzero" })));
}

;// CONCATENATED MODULE: ./src/components/PrevIcon/index.ts


;// CONCATENATED MODULE: ./src/components/DayPicker/defaults/defaultClassNames.ts
var defaultClassNames = {
    /** Root element */
    Root: 'rdp',
    Caption: 'rdp-caption',
    // Day Component
    Day: 'rdp-day',
    // Month Component
    Months: 'rdp-months',
    Month: 'rdp-month',
    Table: 'rdp-table',
    TBody: 'rdp-body',
    // Head Components
    Head: 'rdp-head',
    HeadRow: 'rdp-head-row',
    HeadCell: 'rdp-head-cell',
    // Navigation Component
    Nav: 'rdp-nav',
    NavPrevButton: 'rdp-nav-prev',
    NavNextButton: 'rdp-nav-next',
    // Week Component
    Row: 'rdp-row',
    RowHead: 'rdp-row-head',
    Cell: 'rdp-cell',
    // Modifiers
    DaySelected: 'rdp-day_selected',
    DayDisabled: 'rdp-day_disabled',
    DayInteractive: 'rdp-day_interactive',
    DayToday: 'rdp-day_today',
    DayAfterMonth: 'rdp-day_outside',
    DayBeforeMonth: 'rdp-day_outside'
};

;// CONCATENATED MODULE: ./src/components/DayPicker/defaults/defaultLabels.ts


var defaultLabels = {
    navNextButton: function (month, props) {
        var _a;
        var formatCaption = (_a = props === null || props === void 0 ? void 0 : props.formatCaption) !== null && _a !== void 0 ? _a : defaultProps.formatCaption;
        return "Go to next month: " + formatCaption(month, props);
    },
    navPrevButton: function (month, props) {
        var _a;
        var formatCaption = (_a = props === null || props === void 0 ? void 0 : props.formatCaption) !== null && _a !== void 0 ? _a : defaultProps.formatCaption;
        return "Go to previous month: " + formatCaption(month, props);
    },
    day: function (day, _, props) {
        return (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.format)(day, 'PPPP', { locale: props.locale });
    },
    headCell: function (day, props) {
        return props.formatWeekdayName(day, { locale: props.locale }, 'cccc');
    },
    rowHead: function (n, props) {
        return "Week n. " + n;
    }
};

;// CONCATENATED MODULE: ./src/components/DayPicker/defaults/defaultModifiersClassNames.ts
var defaultModifiersClassNames = {
    selected: 'rdp-day_selected',
    interactive: 'rdp-day_interactive',
    disabled: 'rdp-day_disabled',
    today: 'rdp-day_today',
    afterMonth: 'rdp-day_outside',
    beforeMonth: 'rdp-day_outside'
};

;// CONCATENATED MODULE: ./src/components/DayPicker/utils/formatCaption.ts

/**
 * The function used to format the caption. Use the [[formatCaption]] prop to
 * use another function.
 */
function formatCaption(month, formatOptions) {
    return external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.format(month, 'LLLL Y', formatOptions);
}

;// CONCATENATED MODULE: ./src/components/DayPicker/utils/formatDay.ts

/**
 * The default function used to format the day date. Use the [[formatDay]] prop
 * to use another function.
 */
function formatDay(day, formatOptions) {
    return external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.format(day, 'd', formatOptions);
}

;// CONCATENATED MODULE: ./src/components/DayPicker/utils/formatWeekdayName.ts

/**
 * The default function used to format the day. Use the [[formatWeekdayName]]
 * prop to use another function.
 */
function formatWeekdayName(weekday, formatOptions, format) {
    if (format === void 0) { format = 'cccccc'; }
    return external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.format(weekday, format, formatOptions);
}

;// CONCATENATED MODULE: ./src/components/DayPicker/utils/formatWeekNumber.ts
/**
 * The default function used to format the week number. Use the
 * [[formatWeekNumber]] prop to use another function.
 */
function formatWeekNumber(weekNumber) {
    return "" + weekNumber;
}

;// CONCATENATED MODULE: ./src/components/DayPicker/defaults/defaultProps.ts














var defaultProps = {
    labelsFormatters: defaultLabels,
    enableOutsideDaysClick: false,
    classNames: defaultClassNames,
    className: '',
    components: {
        Caption: Caption,
        Day: Day,
        Navigation: Navigation,
        NextIcon: NextIcon,
        PrevIcon: PrevIcon,
        Week: Row
    },
    fixedWeeks: false,
    formatCaption: formatCaption,
    formatDay: formatDay,
    formatWeekdayName: formatWeekdayName,
    formatWeekNumber: formatWeekNumber,
    initialMonth: undefined,
    locale: (en_US_default()),
    modifiersClassNames: defaultModifiersClassNames,
    month: new Date(),
    numberOfMonths: 1,
    pagedNavigation: false,
    reverseMonths: false,
    showCaption: true,
    showHead: true,
    showNavigation: true,
    showOutsideDays: false,
    showWeekNumber: false,
    today: new Date()
};

;// CONCATENATED MODULE: ./src/components/DayPicker/defaults/defaultModifiers.ts
var defaultModifiers = {
    disabled: false,
    hidden: false,
    interactive: false,
    aftermonth: false,
    beforemonth: false,
    selected: false,
    today: false
};

;// CONCATENATED MODULE: ./src/components/DayPicker/defaults/index.ts






;// CONCATENATED MODULE: ./src/components/DayPicker/utils/getMonthFromProps.tsx

function getMonthFromProps(props) {
    var _a, _b, _c;
    var toMonth = props.toMonth, fromMonth = props.fromMonth;
    var month = (_c = (_b = (_a = props.initialMonth) !== null && _a !== void 0 ? _a : props.month) !== null && _b !== void 0 ? _b : (props.today !== 'off' ? props.today : undefined)) !== null && _c !== void 0 ? _c : new Date();
    month = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfMonth)(month);
    // Fix initial month if is after the `toMonth` prop.
    if (toMonth && (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.isAfter)(month, (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfMonth)(toMonth))) {
        month = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfMonth)(toMonth);
    }
    // Fix initial month if before the `fromMonth`
    if (fromMonth && (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.isBefore)(month, (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfMonth)(fromMonth))) {
        month = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfMonth)(fromMonth);
    }
    return month;
}

;// CONCATENATED MODULE: ./src/components/DayPicker/DayPicker.tsx
var DayPicker_assign = (undefined && undefined.__assign) || function () {
    DayPicker_assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return DayPicker_assign.apply(this, arguments);
};





/**
 * Render a date picker component.
 *
 * **Example**
 *
 * ```jsx showOutput
 * function Example() {
 *   const [selected, setSelected] = useState();
 *
 *   const handleDayClick = (day, { selected }) => {
 *     if (!selected) setSelected(day);
 *     else setSelected();
 *   };
 *
 *   return <DayPicker selected={selected} onDayClick={handleDayClick} />;
 * }
 * ```
 */
function DayPicker(props) {
    var isControlled = !('month' in props); // DayPicker will handle the state
    var month = getMonthFromProps(props);
    var _a = external_root_React_commonjs2_react_commonjs_react_amd_react_.useState(month), currentMonth = _a[0], setCurrentMonth = _a[1];
    var _b = external_root_React_commonjs2_react_commonjs_react_amd_react_.useState(), focusedDay = _b[0], setFocusedDay = _b[1];
    var onMonthChange = function (newMonth, e) {
        var _a;
        if (isControlled)
            setCurrentMonth(newMonth);
        (_a = props.onMonthChange) === null || _a === void 0 ? void 0 : _a.call(props, newMonth, e);
    };
    var onDayFocus = function (day, modifiers, e) {
        var _a;
        if (!(0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.isSameMonth)(day, currentMonth)) {
            onMonthChange((0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfMonth)(day), e);
        }
        setFocusedDay(day);
        (_a = props.onDayFocus) === null || _a === void 0 ? void 0 : _a.call(props, day, modifiers, e);
    };
    var onDayBlur = function (day, modifiers, e) {
        var _a;
        setFocusedDay(undefined);
        (_a = props.onDayBlur) === null || _a === void 0 ? void 0 : _a.call(props, day, modifiers, e);
    };
    var onDayClick = function (day, modifiers, e) {
        var _a;
        (_a = props.onDayClick) === null || _a === void 0 ? void 0 : _a.call(props, day, modifiers, e);
    };
    var overrideProps = {
        month: isControlled ? currentMonth : month,
        onMonthChange: onMonthChange,
        onDayClick: props.onDayClick ? onDayClick : undefined,
        onDayFocus: onDayFocus,
        onDayBlur: onDayBlur,
        focusedDay: focusedDay
    };
    var dayPickerProps = DayPicker_assign(DayPicker_assign(DayPicker_assign(DayPicker_assign({}, defaultProps), props), { components: DayPicker_assign(DayPicker_assign({}, defaultProps.components), props.components), modifiers: DayPicker_assign(DayPicker_assign({}, defaultProps.modifiers), props.modifiers) }), overrideProps);
    return external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement(Root, { dayPickerProps: dayPickerProps });
}

;// CONCATENATED MODULE: ./src/components/DayPicker/index.ts



;// CONCATENATED MODULE: ./src/components/Day/utils/matchModifier.ts

function isDayAfter(day1, day2, inclusive) {
    if (inclusive === void 0) { inclusive = false; }
    if (inclusive) {
        return (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.differenceInDays)(day1, day2) >= 0;
    }
    return (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.differenceInDays)(day1, day2) > 0;
}
function isDayBefore(day1, day2, inclusive) {
    if (inclusive === void 0) { inclusive = false; }
    if (inclusive) {
        return (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.differenceInDays)(day1, day2) <= 0;
    }
    return (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.differenceInDays)(day1, day2) < 0;
}
function matchDate(day, matcher) {
    if (!(matcher instanceof Date))
        return false;
    return (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.isSameDay)(day, matcher);
}
function matchDayBefore(day, matcher) {
    if (!('before' in matcher))
        return false;
    var matchDay = { before: matcher.before };
    return isDayBefore(day, matchDay.before);
}
function matchDayAfter(day, matcher) {
    if (!('after' in matcher))
        return false;
    var matchDay = { after: matcher.after };
    return isDayAfter(day, matchDay.after);
}
function matchDayBetween(day, matcher) {
    if (!('from' in matcher))
        return false;
    var from = matcher.from, to = matcher.to;
    // Matches { from: <Date> }
    if (!to && (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.isSameDay)(from, day))
        return true;
    // Invert the case where "to" is before "from"
    if ((0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.differenceInDays)(to, from) < 0) {
        from = matcher.to;
        to = matcher.from;
    }
    return isDayAfter(day, from, true) && isDayBefore(day, to, true);
}
function matchDayOfWeek(day, matcher) {
    if (!('daysOfWeek' in matcher))
        return false;
    return matcher.daysOfWeek.includes(day.getDay());
}
function matchFunction(day, matcher) {
    if (!(matcher instanceof Function))
        return false;
    return matcher(day);
}
function matchDay(day, matcher) {
    if (!matcher)
        return false;
    var matchers;
    if (Array.isArray(matcher)) {
        matchers = matcher;
    }
    else {
        matchers = [matcher];
    }
    return matchers.some(function (dayMatcher) {
        if (!dayMatcher)
            return false;
        return (
        // Precedence shouldn't be important here
        matchDate(day, dayMatcher) ||
            matchDayBefore(day, dayMatcher) ||
            matchDayAfter(day, dayMatcher) ||
            matchDayBetween(day, dayMatcher) ||
            matchDayOfWeek(day, dayMatcher) ||
            matchFunction(day, dayMatcher));
    });
}

;// CONCATENATED MODULE: ./src/components/Day/utils/findModifiers.ts

var reduceCallback = function (day, matchers) { return function (previousValue, key) {
    var matcher = matchers[key];
    if (matchDay(day, matcher)) {
        previousValue.push(key);
    }
    return previousValue;
}; };
/**
 * Given a date and a list of modifiers to look for, return the names of the modifiers
 * matching that day.
 */
function findModifiers(day, matchers) {
    return Object.keys(matchers).reduce(reduceCallback(day, matchers), []);
}

;// CONCATENATED MODULE: ./src/components/Day/utils/getModifiersFromProps.ts
function getModifiersFromProps(props) {
    var modifiers = Object.assign({}, props.modifiers);
    if (props.selected) {
        modifiers.selected = props.selected;
    }
    if (props.disabled) {
        modifiers.disabled = props.disabled;
    }
    if (props.hidden) {
        modifiers.hidden = props.hidden;
    }
    return modifiers;
}

;// CONCATENATED MODULE: ./src/components/Day/utils/getOutsideModifier.ts

/**
 * Return the proper modifier for days outside the current month.
 */
function getOutsideModifier(day, currentMonth) {
    if ((0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.isBefore)(day, (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.startOfMonth)(currentMonth)))
        return 'beforemonth';
    else if ((0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.isAfter)(day, (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.endOfMonth)(currentMonth)))
        return 'aftermonth';
    return undefined;
}

;// CONCATENATED MODULE: ./src/components/Day/utils/getModifiers.ts
var getModifiers_assign = (undefined && undefined.__assign) || function () {
    getModifiers_assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return getModifiers_assign.apply(this, arguments);
};





/**
 * Return the status of the modifiers for the given day,
 */
function getModifiers(day, currentMonth, props) {
    var modifiers = getModifiers_assign({}, defaultModifiers);
    if (props.today !== 'off') {
        modifiers.today = (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.isSameDay)(props.today, day);
    }
    else {
        modifiers.today = false;
    }
    var outsideModifier = getOutsideModifier(day, currentMonth);
    if (outsideModifier) {
        modifiers[outsideModifier] = true;
    }
    var isOutside = modifiers.beforemonth || modifiers.aftermonth;
    modifiers.hidden = isOutside && !props.showOutsideDays;
    modifiers.disabled = isOutside && !props.enableOutsideDaysClick;
    var modifiersFromProps = getModifiersFromProps(props);
    var foundModifiers = findModifiers(day, modifiersFromProps);
    foundModifiers.forEach(function (modifier) { return (modifiers[modifier] = true); });
    if (props.onDayClick && !modifiers.hidden && !modifiers.disabled) {
        modifiers.interactive = true;
    }
    return modifiers;
}

;// CONCATENATED MODULE: ./src/components/Day/getDayComponent.ts
var getDayComponent_assign = (undefined && undefined.__assign) || function () {
    getDayComponent_assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return getDayComponent_assign.apply(this, arguments);
};






function getDayComponent(day, currentMonth, props) {
    var modifiers = getModifiers(day, currentMonth, props);
    var labelsFormatters = props.labelsFormatters;
    var tabIndex = createTabIndex(day, modifiers, props);
    var eventHandlers = createEventHandlers(day, modifiers, props);
    var style = createStyle(day, modifiers, props);
    var className = createClassName(day, modifiers, props);
    var rootProps = getDayComponent_assign({ 'aria-disabled': modifiers.interactive ? modifiers.disabled : undefined, 'aria-label': labelsFormatters.day(day, modifiers, props), 'aria-pressed': modifiers.interactive ? modifiers.selected : undefined, className: className, dateTime: (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.format)(day, 'yyyy-MM-dd'), role: modifiers.interactive ? 'button' : undefined, style: style,
        tabIndex: tabIndex }, eventHandlers);
    return { modifiers: modifiers, rootProps: rootProps };
}

;// CONCATENATED MODULE: ./src/components/Day/Day.tsx
var Day_assign = (undefined && undefined.__assign) || function () {
    Day_assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return Day_assign.apply(this, arguments);
};



function Day(props) {
    var el = external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef(null);
    var day = props.day, dayPickerProps = props.dayPickerProps, currentMonth = props.currentMonth;
    var locale = dayPickerProps.locale, formatDay = dayPickerProps.formatDay, focusedDay = dayPickerProps.focusedDay;
    var _a = getDayComponent(day, currentMonth, dayPickerProps), rootProps = _a.rootProps, modifiers = _a.modifiers;
    if (modifiers.hidden) {
        return null;
    }
    external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect(function () {
        var _a;
        if (focusedDay && (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.isSameDay)(focusedDay, day)) {
            (_a = el === null || el === void 0 ? void 0 : el.current) === null || _a === void 0 ? void 0 : _a.focus();
        }
    }, [dayPickerProps.focusedDay]);
    return (external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement("time", Day_assign({}, rootProps, { ref: el }), formatDay(day, { locale: locale })));
}

;// CONCATENATED MODULE: ./src/components/Day/index.ts




;// CONCATENATED MODULE: ./src/components/Caption/index.ts



;// CONCATENATED MODULE: ./src/components/index.ts











;// CONCATENATED MODULE: ./src/hooks/useInput/useInput.ts



/**
 * @private
 */
function isValidDate(day) {
    return !isNaN(day.getTime());
}
/**
 * Return the props for binding an input field with DayPicker.
 *
 * **Example**
 *
 * ```jsx showOutput open=no
 * function Example() {
 *   const { dayPickerProps, inputProps } = useInput(new Date(), 'yyyy-MM-dd');
 *   return (
 *     <>
 *       <p>
 *         Type a day or pick one from the calendar:
 *         <input {...inputProps} placeholder="YYYY-MM-DD" />
 *       </p>
 *       <DayPicker {...dayPickerProps} />
 *     </>
 *   );
 * }
 * ```
 */
function useInput(initialDay, formatStr, options) {
    var _a, _b;
    // Defaults from options
    var locale = (_a = options === null || options === void 0 ? void 0 : options.locale) !== null && _a !== void 0 ? _a : defaultProps.locale;
    var required = (_b = options === null || options === void 0 ? void 0 : options.required) !== null && _b !== void 0 ? _b : false;
    // Shortcut to the DateFns functions
    var format = function (day) { return external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.format(day, formatStr, { locale: locale }); };
    var parse = function (value) {
        return external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.parse(value, formatStr, new Date(), { locale: locale });
    };
    // The initial value of the input field
    var initialValue = initialDay ? format(initialDay) : '';
    // Initialize state
    var _c = external_root_React_commonjs2_react_commonjs_react_amd_react_.useState(initialDay), selected = _c[0], setSelected = _c[1];
    var _d = external_root_React_commonjs2_react_commonjs_react_amd_react_.useState(initialValue), value = _d[0], setValue = _d[1];
    var _e = external_root_React_commonjs2_react_commonjs_react_amd_react_.useState(initialDay !== null && initialDay !== void 0 ? initialDay : defaultProps.month), month = _e[0], setMonth = _e[1];
    var onDayClick = function (day) {
        setSelected(day);
        setValue(format(day));
    };
    var onMonthChange = function (month) {
        setMonth(month);
    };
    // When changing the input field, save its value in state and check if the
    // string is a valid date. If it is a valid day, set it as selected and update
    // the calendar’s month.
    var onChange = function (e) {
        setValue(e.target.value);
        var day = parse(e.target.value);
        if (!isValidDate(day)) {
            setSelected(undefined);
            return;
        }
        setSelected(day);
        setMonth(day);
    };
    // Special case for _required_ fields: on blur, if the value of the input is not
    // a valid date, reset the calendar and the input value.
    var onBlur = function (e) {
        var _a;
        var day = parse(e.target.value);
        if ((_a = !required) !== null && _a !== void 0 ? _a : isValidDate(day)) {
            return;
        }
        setSelected(initialDay);
        setMonth(initialDay !== null && initialDay !== void 0 ? initialDay : defaultProps.month);
        setValue(initialValue !== null && initialValue !== void 0 ? initialValue : '');
    };
    // When focusing, make sure DayPicker visualize the month of the date in the
    // input field.
    var onFocus = function (e) {
        if (e.target.value) {
            var day = parse(e.target.value);
            if (isValidDate(day)) {
                setMonth(day);
            }
            return;
        }
        setSelected(initialDay);
        setMonth(initialDay !== null && initialDay !== void 0 ? initialDay : defaultProps.month);
        setValue(initialValue !== null && initialValue !== void 0 ? initialValue : '');
    };
    return {
        setMonth: setMonth,
        setValue: setValue,
        dayPickerProps: {
            month: month,
            selected: selected,
            onDayClick: onDayClick,
            onMonthChange: onMonthChange
        },
        inputProps: {
            value: value,
            onChange: onChange,
            onFocus: onFocus,
            onBlur: onBlur
        }
    };
}

;// CONCATENATED MODULE: ./src/hooks/useInput/index.ts


;// CONCATENATED MODULE: ./src/hooks/useRange/addToRange.ts

var emptyRange = { from: undefined, to: undefined };
/**
 * Add a day to an existing range.
 *
 * The returned range takes in account the `undefined` values and if the added
 * day is already present in the range.
 */
function addToRange(range, day) {
    var from = range.from, to = range.to;
    if (!from) {
        return { from: day };
    }
    if (!to && (0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.isSameDay)(from, day)) {
        return emptyRange;
    }
    if (!to) {
        return { from: from, to: day };
    }
    if ((0,external_root_DateFns_commonjs2_date_fns_commonjs_date_fns_amd_date_fns_.isSameDay)(to, day)) {
        return { from: to };
    }
    return { from: from, to: day };
}

;// CONCATENATED MODULE: ./src/hooks/useRange/useRange.ts


var useRange_emptyRange = { from: undefined, to: undefined };
/**
 * Returns a range and a state setter for handing ranges when selecting dates.
 *
 * **Example**
 *
 * ```jsx showOutput open=false
 * function Example() {
 *   const [range, setRange] = useRange();
 *   return <DayPicker onDayClick={setRange} selected={range} />;
 * }
 * ```
 */
function useRange(initialRange) {
    if (initialRange === void 0) { initialRange = useRange_emptyRange; }
    var _a = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(initialRange), range = _a[0], setInternalRange = _a[1];
    var setRange = function (day) {
        if (!day) {
            setInternalRange(useRange_emptyRange);
        }
        else {
            setInternalRange(addToRange(range, day));
        }
        return;
    };
    return [range, setRange];
}

;// CONCATENATED MODULE: ./src/hooks/useRange/index.ts



;// CONCATENATED MODULE: ./src/hooks/index.ts



;// CONCATENATED MODULE: ./src/index.ts





/***/ }),

/***/ 259:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_MODULE__259__;

/***/ }),

/***/ 698:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_MODULE__698__;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// module exports must be returned from runtime so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(130);
/******/ })()
;
});
//# sourceMappingURL=index.js.map