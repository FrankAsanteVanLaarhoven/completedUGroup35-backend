var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { isSameMonth, startOfMonth } from 'date-fns';
import * as React from 'react';
import { Root } from '../Root';
import { defaultProps } from './defaults';
import { getMonthFromProps } from './utils/getMonthFromProps';
/**
 * Render a date picker component.
 *
 * **Example**
 *
 * ```jsx showOutput
 * function Example() {
 *   const [selected, setSelected] = useState();
 *
 *   const handleDayClick = (day, { selected }) => {
 *     if (!selected) setSelected(day);
 *     else setSelected();
 *   };
 *
 *   return <DayPicker selected={selected} onDayClick={handleDayClick} />;
 * }
 * ```
 */
export function DayPicker(props) {
    var isControlled = !('month' in props); // DayPicker will handle the state
    var month = getMonthFromProps(props);
    var _a = React.useState(month), currentMonth = _a[0], setCurrentMonth = _a[1];
    var _b = React.useState(), focusedDay = _b[0], setFocusedDay = _b[1];
    var onMonthChange = function (newMonth, e) {
        var _a;
        if (isControlled)
            setCurrentMonth(newMonth);
        (_a = props.onMonthChange) === null || _a === void 0 ? void 0 : _a.call(props, newMonth, e);
    };
    var onDayFocus = function (day, modifiers, e) {
        var _a;
        if (!isSameMonth(day, currentMonth)) {
            onMonthChange(startOfMonth(day), e);
        }
        setFocusedDay(day);
        (_a = props.onDayFocus) === null || _a === void 0 ? void 0 : _a.call(props, day, modifiers, e);
    };
    var onDayBlur = function (day, modifiers, e) {
        var _a;
        setFocusedDay(undefined);
        (_a = props.onDayBlur) === null || _a === void 0 ? void 0 : _a.call(props, day, modifiers, e);
    };
    var onDayClick = function (day, modifiers, e) {
        var _a;
        (_a = props.onDayClick) === null || _a === void 0 ? void 0 : _a.call(props, day, modifiers, e);
    };
    var overrideProps = {
        month: isControlled ? currentMonth : month,
        onMonthChange: onMonthChange,
        onDayClick: props.onDayClick ? onDayClick : undefined,
        onDayFocus: onDayFocus,
        onDayBlur: onDayBlur,
        focusedDay: focusedDay
    };
    var dayPickerProps = __assign(__assign(__assign(__assign({}, defaultProps), props), { components: __assign(__assign({}, defaultProps.components), props.components), modifiers: __assign(__assign({}, defaultProps.modifiers), props.modifiers) }), overrideProps);
    return React.createElement(Root, { dayPickerProps: dayPickerProps });
}
//# sourceMappingURL=DayPicker.js.map