var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { addMonths, getTime } from 'date-fns';
import React, { useRef, useState } from 'react';
import { Table } from '../Table';
import { getMonths } from './utils/getMonths';
export function Root(props) {
    var _a;
    var monthsEl = useRef(null);
    var dayPickerProps = props.dayPickerProps;
    var components = dayPickerProps.components, className = dayPickerProps.className, classNames = dayPickerProps.classNames, style = dayPickerProps.style, styles = dayPickerProps.styles, dir = dayPickerProps.dir, showNavigation = dayPickerProps.showNavigation, onMonthChange = dayPickerProps.onMonthChange, month = dayPickerProps.month;
    var Navigation = components.Navigation;
    var months = getMonths(dayPickerProps);
    var rootClassNames = [(_a = classNames === null || classNames === void 0 ? void 0 : classNames.Root) !== null && _a !== void 0 ? _a : ''];
    if (className) {
        rootClassNames.concat(className.split(' '));
    }
    var _b = useState(false), focused = _b[0], setFocused = _b[1];
    var handleKeyDown = function (e) {
        if (!focused)
            return;
        if (e.key === (dir === 'rtl' ? 'ArrowRight' : 'ArrowLeft')) {
            onMonthChange === null || onMonthChange === void 0 ? void 0 : onMonthChange(addMonths(month, 1), e);
        }
        if (e.key === (dir === 'rtl' ? 'ArrowLeft' : 'ArrowRight')) {
            onMonthChange === null || onMonthChange === void 0 ? void 0 : onMonthChange(addMonths(month, -1), e);
        }
    };
    var handleFocus = function (e) {
        if (e.target !== monthsEl.current)
            return;
        setFocused(true);
    };
    var handleBlur = function () {
        if (!focused)
            return;
        setFocused(false);
    };
    return (React.createElement("div", { className: rootClassNames.join(' '), style: __assign(__assign({}, styles === null || styles === void 0 ? void 0 : styles.Root), style), dir: dir },
        React.createElement("div", { className: classNames === null || classNames === void 0 ? void 0 : classNames.Months, style: styles === null || styles === void 0 ? void 0 : styles.Month, tabIndex: 0, onFocus: handleFocus, onBlur: handleBlur, onKeyDown: handleKeyDown, ref: monthsEl }, months.map(function (month) { return (React.createElement("div", { className: classNames === null || classNames === void 0 ? void 0 : classNames.Month, key: getTime(month) },
            React.createElement(Table, { month: month, dayPickerProps: dayPickerProps }))); })),
        showNavigation && onMonthChange && (React.createElement(Navigation, { dayPickerProps: dayPickerProps }))));
}
//# sourceMappingURL=Root.js.map