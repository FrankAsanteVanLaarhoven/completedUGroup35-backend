var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { isSameDay } from 'date-fns';
import { defaultModifiers } from '../../DayPicker';
import { findModifiers } from './findModifiers';
import { getModifiersFromProps } from './getModifiersFromProps';
import { getOutsideModifier } from './getOutsideModifier';
/**
 * Return the status of the modifiers for the given day,
 */
export function getModifiers(day, currentMonth, props) {
    var modifiers = __assign({}, defaultModifiers);
    if (props.today !== 'off') {
        modifiers.today = isSameDay(props.today, day);
    }
    else {
        modifiers.today = false;
    }
    var outsideModifier = getOutsideModifier(day, currentMonth);
    if (outsideModifier) {
        modifiers[outsideModifier] = true;
    }
    var isOutside = modifiers.beforemonth || modifiers.aftermonth;
    modifiers.hidden = isOutside && !props.showOutsideDays;
    modifiers.disabled = isOutside && !props.enableOutsideDaysClick;
    var modifiersFromProps = getModifiersFromProps(props);
    var foundModifiers = findModifiers(day, modifiersFromProps);
    foundModifiers.forEach(function (modifier) { return (modifiers[modifier] = true); });
    if (props.onDayClick && !modifiers.hidden && !modifiers.disabled) {
        modifiers.interactive = true;
    }
    return modifiers;
}
//# sourceMappingURL=getModifiers.js.map