import { differenceInDays, isSameDay } from 'date-fns';
function isDayAfter(day1, day2, inclusive) {
    if (inclusive === void 0) { inclusive = false; }
    if (inclusive) {
        return differenceInDays(day1, day2) >= 0;
    }
    return differenceInDays(day1, day2) > 0;
}
function isDayBefore(day1, day2, inclusive) {
    if (inclusive === void 0) { inclusive = false; }
    if (inclusive) {
        return differenceInDays(day1, day2) <= 0;
    }
    return differenceInDays(day1, day2) < 0;
}
function matchDate(day, matcher) {
    if (!(matcher instanceof Date))
        return false;
    return isSameDay(day, matcher);
}
function matchDayBefore(day, matcher) {
    if (!('before' in matcher))
        return false;
    var matchDay = { before: matcher.before };
    return isDayBefore(day, matchDay.before);
}
function matchDayAfter(day, matcher) {
    if (!('after' in matcher))
        return false;
    var matchDay = { after: matcher.after };
    return isDayAfter(day, matchDay.after);
}
function matchDayBetween(day, matcher) {
    if (!('from' in matcher))
        return false;
    var from = matcher.from, to = matcher.to;
    // Matches { from: <Date> }
    if (!to && isSameDay(from, day))
        return true;
    // Invert the case where "to" is before "from"
    if (differenceInDays(to, from) < 0) {
        from = matcher.to;
        to = matcher.from;
    }
    return isDayAfter(day, from, true) && isDayBefore(day, to, true);
}
function matchDayOfWeek(day, matcher) {
    if (!('daysOfWeek' in matcher))
        return false;
    return matcher.daysOfWeek.includes(day.getDay());
}
function matchFunction(day, matcher) {
    if (!(matcher instanceof Function))
        return false;
    return matcher(day);
}
export function matchDay(day, matcher) {
    if (!matcher)
        return false;
    var matchers;
    if (Array.isArray(matcher)) {
        matchers = matcher;
    }
    else {
        matchers = [matcher];
    }
    return matchers.some(function (dayMatcher) {
        if (!dayMatcher)
            return false;
        return (
        // Precedence shouldn't be important here
        matchDate(day, dayMatcher) ||
            matchDayBefore(day, dayMatcher) ||
            matchDayAfter(day, dayMatcher) ||
            matchDayBetween(day, dayMatcher) ||
            matchDayOfWeek(day, dayMatcher) ||
            matchFunction(day, dayMatcher));
    });
}
//# sourceMappingURL=matchModifier.js.map