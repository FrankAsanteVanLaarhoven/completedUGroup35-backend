'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _objectWithoutProperties = require('@babel/runtime/helpers/objectWithoutProperties');
var _objectSpread = require('@babel/runtime/helpers/objectSpread2');
var _extends = require('@babel/runtime/helpers/extends');
var core = require('@emotion/core');
var react = require('react');
var ReactSelect = require('react-select');
var octiconsReact = require('@primer/octicons-react');
var theme = require('@arch-ui/theme');
var common = require('@arch-ui/common');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var ReactSelect__default = /*#__PURE__*/_interopDefault(ReactSelect);

const CheckMark = ({
  isDisabled,
  isFocused,
  isSelected
}) => {
  let bg;
  let fg;
  let border;
  let size = 24;

  if (isDisabled) {
    bg = isSelected ? theme.colors.N20 : theme.colors.N10;
    fg = isSelected ? 'white' : theme.colors.N10;
    border = isSelected ? theme.colors.N20 : theme.colors.N10;
  } else if (isSelected) {
    bg = isFocused ? 'white' : theme.colors.B.base;
    fg = isFocused ? theme.colors.B.base : 'white';
    border = theme.colors.B.base;
  } else {
    border = isFocused ? theme.colors.N15 : theme.colors.N10;
    bg = isFocused ? theme.colors.N05 : 'white';
    fg = isFocused ? theme.colors.N05 : 'white';
  }

  return core.jsx("div", {
    css: {
      alignItems: 'center',
      backgroundColor: bg,
      border: `2px solid ${border}`,
      borderRadius: size,
      boxSizing: 'border-box',
      color: fg,
      display: 'flex',
      height: size,
      justifyContent: 'center',
      width: size
    }
  }, core.jsx(octiconsReact.CheckIcon, null));
};
const OptionPrimitive = ({
  children,
  isDisabled,
  innerProps,
  innerRef,
  className
}) => {
  return core.jsx("div", _extends({
    ref: innerRef,
    className: className,
    css: {
      alignItems: 'center',
      color: isDisabled ? theme.colors.N40 : null,
      cursor: 'pointer',
      display: 'flex',
      fontSize: '0.9em',
      fontWeight: 500,
      justifyContent: 'space-between',
      outline: 0,
      padding: `${theme.gridSize}px 0`,
      pointerEvents: isDisabled ? 'none' : null,
      '&:not(:first-of-type)': {
        borderTop: `1px solid ${theme.colors.N10}`
      }
    }
  }, innerProps), children);
};
const optionRendererStyles = {
  control: (provided, state) => _objectSpread(_objectSpread(_objectSpread({}, provided), common.uniformHeight), {}, {
    background: state.isFocused ? theme.colors.N10 : theme.colors.N05,
    border: 0,
    boxShadow: 'none',
    cursor: 'text',
    padding: 0,
    minHeight: 34
  }),
  menu: () => ({
    marginTop: 8
  }),
  menuList: provided => _objectSpread(_objectSpread({}, provided), {}, {
    padding: 0
  }),
  placeholder: provided => _objectSpread(_objectSpread({}, provided), {}, {
    color: theme.colors.N50
  })
};

const Control = (_ref) => {
  let {
    selectProps
  } = _ref,
      props = _objectWithoutProperties(_ref, ["selectProps"]);

  return selectProps.shouldDisplaySearchControl ? core.jsx(ReactSelect.components.Control, props) : core.jsx("div", {
    css: {
      border: 0,
      clip: 'rect(1px, 1px, 1px, 1px)',
      height: 1,
      overflow: 'hidden',
      padding: 0,
      position: 'absolute',
      whiteSpace: 'nowrap',
      width: 1
    }
  }, core.jsx(ReactSelect.components.Control, props));
};

const defaultComponents = {
  Control,
  Option: OptionPrimitive,
  DropdownIndicator: null,
  IndicatorSeparator: null
};
const Options = (_ref2) => {
  let {
    displaySearch = true,
    innerRef,
    components: propComponents
  } = _ref2,
      props = _objectWithoutProperties(_ref2, ["displaySearch", "innerRef", "components"]);

  const components = react.useMemo(() => _objectSpread(_objectSpread({}, defaultComponents), propComponents), [propComponents]);
  return core.jsx(ReactSelect__default['default'], _extends({
    backspaceRemovesValue: false,
    captureMenuScroll: false,
    closeMenuOnSelect: false,
    controlShouldRenderValue: false,
    hideSelectedOptions: false,
    isClearable: false,
    isSearchable: displaySearch,
    maxMenuHeight: 1000,
    menuIsOpen: true,
    menuShouldScrollIntoView: false,
    ref: innerRef,
    shouldDisplaySearchControl: displaySearch,
    styles: optionRendererStyles // TODO: JW: Not a fan of this, but it doesn't seem to make a difference
    // if we take it out. react-select bug maybe?
    ,
    tabSelectsValue: false
  }, props, {
    components: components
  }));
};

exports.CheckMark = CheckMark;
exports.OptionPrimitive = OptionPrimitive;
exports.Options = Options;
