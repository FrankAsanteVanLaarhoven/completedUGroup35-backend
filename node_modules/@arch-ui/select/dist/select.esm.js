import _extends from '@babel/runtime/helpers/esm/extends';
import _objectWithoutProperties from '@babel/runtime/helpers/esm/objectWithoutProperties';
import _objectSpread from '@babel/runtime/helpers/esm/objectSpread2';
import { createElement, useMemo } from 'react';
import BaseSelect from 'react-select';
import AsyncCreatableSelect from 'react-select/async-creatable';
import AsyncSelect from 'react-select/async';
import CreatableSelect from 'react-select/creatable';
import { colors } from '@arch-ui/theme';

// Styled Select
// ==============================

const indicatorStyles = (provided, {
  isDisabled,
  isFocused
}) => {
  let styles = {
    color: colors.N20,
    ':hover': !isDisabled && !isFocused ? {
      color: colors.N40
    } : null
  };
  if (isDisabled) styles = {
    color: colors.N10
  };

  if (isFocused) {
    styles = {
      color: colors.N60,
      ':hover': {
        color: colors.N80
      }
    };
  }

  return _objectSpread(_objectSpread({}, provided), styles);
};

const selectStyles = {
  control: (provided, {
    isFocused
  }) => {
    const focusStyles = isFocused ? {
      borderColor: colors.primary,
      boxShadow: `inset 0 1px 1px rgba(0, 0, 0, 0.075),
      0 0 0 3px ${colors.B.A20}`,
      outline: 0
    } : null;
    return _objectSpread(_objectSpread({}, provided), {}, {
      backgroundColor: 'white',
      borderColor: colors.N20,
      fontSize: '1rem',
      minHeight: 35,
      minWidth: '200px',
      ':hover': {
        borderColor: colors.N30
      }
    }, focusStyles);
  },
  clearIndicator: indicatorStyles,
  dropdownIndicator: indicatorStyles,
  menu: provided => _objectSpread(_objectSpread({}, provided), {}, {
    fontSize: '0.9em',
    zIndex: 10
  }),
  option: (provided, {
    isDisabled,
    isFocused,
    isSelected
  }) => {
    let bg = 'inherit';
    if (isFocused) bg = colors.B.L90;
    if (isSelected) bg = colors.primary;
    let txt = 'inherit';
    if (isFocused) txt = colors.primary;
    if (isSelected) txt = 'white';
    if (isDisabled) txt = colors.N40;
    const cssPseudoActive = !isSelected && !isDisabled ? {
      backgroundColor: colors.B.L80,
      color: colors.B.D20
    } : {};
    return _objectSpread(_objectSpread({}, provided), {}, {
      fontSize: '1rem',
      backgroundColor: bg,
      color: txt,
      ':active': cssPseudoActive
    });
  },
  menuPortal: provided => _objectSpread(_objectSpread({}, provided), {}, {
    zIndex: 3
  })
};

const getSelectVariant = ({
  isAsync,
  isCreatable
}) => {
  if (isAsync && isCreatable) {
    return AsyncCreatableSelect;
  }

  if (isAsync) {
    return AsyncSelect;
  }

  if (isCreatable) {
    return CreatableSelect;
  }

  return BaseSelect;
};

const Select = (_ref) => {
  let {
    isAsync,
    isCreatable,
    innerRef,
    styles
  } = _ref,
      props = _objectWithoutProperties(_ref, ["isAsync", "isCreatable", "innerRef", "styles"]);

  const ReactSelect = getSelectVariant({
    isAsync,
    isCreatable
  });
  return /*#__PURE__*/createElement(ReactSelect, _extends({
    ref: innerRef,
    styles: useMemo(() => _objectSpread(_objectSpread({}, selectStyles), styles), [styles])
  }, props));
};

export default Select;
